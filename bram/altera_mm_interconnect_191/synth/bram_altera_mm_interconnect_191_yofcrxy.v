// bram_altera_mm_interconnect_191_yofcrxy.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module bram_altera_mm_interconnect_191_yofcrxy (
		input  wire [0:0]  VexRiscvAxi4_0_dBusaxi_awid,                      //                     VexRiscvAxi4_0_dBusaxi.awid
		input  wire [31:0] VexRiscvAxi4_0_dBusaxi_awaddr,                    //                                           .awaddr
		input  wire [7:0]  VexRiscvAxi4_0_dBusaxi_awlen,                     //                                           .awlen
		input  wire [2:0]  VexRiscvAxi4_0_dBusaxi_awsize,                    //                                           .awsize
		input  wire [1:0]  VexRiscvAxi4_0_dBusaxi_awburst,                   //                                           .awburst
		input  wire [0:0]  VexRiscvAxi4_0_dBusaxi_awlock,                    //                                           .awlock
		input  wire [3:0]  VexRiscvAxi4_0_dBusaxi_awcache,                   //                                           .awcache
		input  wire [2:0]  VexRiscvAxi4_0_dBusaxi_awprot,                    //                                           .awprot
		input  wire [3:0]  VexRiscvAxi4_0_dBusaxi_awqos,                     //                                           .awqos
		input  wire [3:0]  VexRiscvAxi4_0_dBusaxi_awregion,                  //                                           .awregion
		input  wire        VexRiscvAxi4_0_dBusaxi_awvalid,                   //                                           .awvalid
		output wire        VexRiscvAxi4_0_dBusaxi_awready,                   //                                           .awready
		input  wire [31:0] VexRiscvAxi4_0_dBusaxi_wdata,                     //                                           .wdata
		input  wire [3:0]  VexRiscvAxi4_0_dBusaxi_wstrb,                     //                                           .wstrb
		input  wire        VexRiscvAxi4_0_dBusaxi_wlast,                     //                                           .wlast
		input  wire        VexRiscvAxi4_0_dBusaxi_wvalid,                    //                                           .wvalid
		output wire        VexRiscvAxi4_0_dBusaxi_wready,                    //                                           .wready
		output wire [0:0]  VexRiscvAxi4_0_dBusaxi_bid,                       //                                           .bid
		output wire [1:0]  VexRiscvAxi4_0_dBusaxi_bresp,                     //                                           .bresp
		output wire        VexRiscvAxi4_0_dBusaxi_bvalid,                    //                                           .bvalid
		input  wire        VexRiscvAxi4_0_dBusaxi_bready,                    //                                           .bready
		input  wire [0:0]  VexRiscvAxi4_0_dBusaxi_arid,                      //                                           .arid
		input  wire [31:0] VexRiscvAxi4_0_dBusaxi_araddr,                    //                                           .araddr
		input  wire [7:0]  VexRiscvAxi4_0_dBusaxi_arlen,                     //                                           .arlen
		input  wire [2:0]  VexRiscvAxi4_0_dBusaxi_arsize,                    //                                           .arsize
		input  wire [1:0]  VexRiscvAxi4_0_dBusaxi_arburst,                   //                                           .arburst
		input  wire [0:0]  VexRiscvAxi4_0_dBusaxi_arlock,                    //                                           .arlock
		input  wire [3:0]  VexRiscvAxi4_0_dBusaxi_arcache,                   //                                           .arcache
		input  wire [2:0]  VexRiscvAxi4_0_dBusaxi_arprot,                    //                                           .arprot
		input  wire [3:0]  VexRiscvAxi4_0_dBusaxi_arqos,                     //                                           .arqos
		input  wire [3:0]  VexRiscvAxi4_0_dBusaxi_arregion,                  //                                           .arregion
		input  wire        VexRiscvAxi4_0_dBusaxi_arvalid,                   //                                           .arvalid
		output wire        VexRiscvAxi4_0_dBusaxi_arready,                   //                                           .arready
		output wire [0:0]  VexRiscvAxi4_0_dBusaxi_rid,                       //                                           .rid
		output wire [31:0] VexRiscvAxi4_0_dBusaxi_rdata,                     //                                           .rdata
		output wire [1:0]  VexRiscvAxi4_0_dBusaxi_rresp,                     //                                           .rresp
		output wire        VexRiscvAxi4_0_dBusaxi_rlast,                     //                                           .rlast
		output wire        VexRiscvAxi4_0_dBusaxi_rvalid,                    //                                           .rvalid
		input  wire        VexRiscvAxi4_0_dBusaxi_rready,                    //                                           .rready
		input  wire [0:0]  VexRiscvAxi4_0_iBusaxi_awid,                      //                     VexRiscvAxi4_0_iBusaxi.awid
		input  wire [31:0] VexRiscvAxi4_0_iBusaxi_awaddr,                    //                                           .awaddr
		input  wire [0:0]  VexRiscvAxi4_0_iBusaxi_awlock,                    //                                           .awlock
		input  wire [2:0]  VexRiscvAxi4_0_iBusaxi_awprot,                    //                                           .awprot
		input  wire        VexRiscvAxi4_0_iBusaxi_awvalid,                   //                                           .awvalid
		output wire        VexRiscvAxi4_0_iBusaxi_awready,                   //                                           .awready
		input  wire [31:0] VexRiscvAxi4_0_iBusaxi_wdata,                     //                                           .wdata
		input  wire        VexRiscvAxi4_0_iBusaxi_wlast,                     //                                           .wlast
		input  wire        VexRiscvAxi4_0_iBusaxi_wvalid,                    //                                           .wvalid
		output wire        VexRiscvAxi4_0_iBusaxi_wready,                    //                                           .wready
		output wire [0:0]  VexRiscvAxi4_0_iBusaxi_bid,                       //                                           .bid
		output wire        VexRiscvAxi4_0_iBusaxi_bvalid,                    //                                           .bvalid
		input  wire        VexRiscvAxi4_0_iBusaxi_bready,                    //                                           .bready
		input  wire [0:0]  VexRiscvAxi4_0_iBusaxi_arid,                      //                                           .arid
		input  wire [31:0] VexRiscvAxi4_0_iBusaxi_araddr,                    //                                           .araddr
		input  wire [7:0]  VexRiscvAxi4_0_iBusaxi_arlen,                     //                                           .arlen
		input  wire [2:0]  VexRiscvAxi4_0_iBusaxi_arsize,                    //                                           .arsize
		input  wire [1:0]  VexRiscvAxi4_0_iBusaxi_arburst,                   //                                           .arburst
		input  wire [0:0]  VexRiscvAxi4_0_iBusaxi_arlock,                    //                                           .arlock
		input  wire [3:0]  VexRiscvAxi4_0_iBusaxi_arcache,                   //                                           .arcache
		input  wire [2:0]  VexRiscvAxi4_0_iBusaxi_arprot,                    //                                           .arprot
		input  wire [3:0]  VexRiscvAxi4_0_iBusaxi_arqos,                     //                                           .arqos
		input  wire [3:0]  VexRiscvAxi4_0_iBusaxi_arregion,                  //                                           .arregion
		input  wire        VexRiscvAxi4_0_iBusaxi_arvalid,                   //                                           .arvalid
		output wire        VexRiscvAxi4_0_iBusaxi_arready,                   //                                           .arready
		output wire [0:0]  VexRiscvAxi4_0_iBusaxi_rid,                       //                                           .rid
		output wire [31:0] VexRiscvAxi4_0_iBusaxi_rdata,                     //                                           .rdata
		output wire [1:0]  VexRiscvAxi4_0_iBusaxi_rresp,                     //                                           .rresp
		output wire        VexRiscvAxi4_0_iBusaxi_rlast,                     //                                           .rlast
		output wire        VexRiscvAxi4_0_iBusaxi_rvalid,                    //                                           .rvalid
		input  wire        VexRiscvAxi4_0_iBusaxi_rready,                    //                                           .rready
		output wire [9:0]  onchip_memory_s1_address,                         //                           onchip_memory_s1.address
		output wire        onchip_memory_s1_write,                           //                                           .write
		input  wire [31:0] onchip_memory_s1_readdata,                        //                                           .readdata
		output wire [31:0] onchip_memory_s1_writedata,                       //                                           .writedata
		output wire [3:0]  onchip_memory_s1_byteenable,                      //                                           .byteenable
		output wire        onchip_memory_s1_chipselect,                      //                                           .chipselect
		output wire        onchip_memory_s1_clken,                           //                                           .clken
		input  wire        VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset, // VexRiscvAxi4_0_reset_reset_bridge_in_reset.reset
		input  wire        clock_in_out_clk_clk                              //                           clock_in_out_clk.clk
	);

	wire    [0:0] vexriscvaxi4_0_dbusaxi_translator_m0_ruser;           // VexRiscvAxi4_0_dBusaxi_agent:ruser -> VexRiscvAxi4_0_dBusaxi_translator:m0_ruser
	wire    [0:0] vexriscvaxi4_0_dbusaxi_translator_m0_wuser;           // VexRiscvAxi4_0_dBusaxi_translator:m0_wuser -> VexRiscvAxi4_0_dBusaxi_agent:wuser
	wire    [1:0] vexriscvaxi4_0_dbusaxi_translator_m0_awburst;         // VexRiscvAxi4_0_dBusaxi_translator:m0_awburst -> VexRiscvAxi4_0_dBusaxi_agent:awburst
	wire    [3:0] vexriscvaxi4_0_dbusaxi_translator_m0_arregion;        // VexRiscvAxi4_0_dBusaxi_translator:m0_arregion -> VexRiscvAxi4_0_dBusaxi_agent:arregion
	wire    [0:0] vexriscvaxi4_0_dbusaxi_translator_m0_awuser;          // VexRiscvAxi4_0_dBusaxi_translator:m0_awuser -> VexRiscvAxi4_0_dBusaxi_agent:awuser
	wire    [7:0] vexriscvaxi4_0_dbusaxi_translator_m0_arlen;           // VexRiscvAxi4_0_dBusaxi_translator:m0_arlen -> VexRiscvAxi4_0_dBusaxi_agent:arlen
	wire    [3:0] vexriscvaxi4_0_dbusaxi_translator_m0_arqos;           // VexRiscvAxi4_0_dBusaxi_translator:m0_arqos -> VexRiscvAxi4_0_dBusaxi_agent:arqos
	wire    [3:0] vexriscvaxi4_0_dbusaxi_translator_m0_wstrb;           // VexRiscvAxi4_0_dBusaxi_translator:m0_wstrb -> VexRiscvAxi4_0_dBusaxi_agent:wstrb
	wire          vexriscvaxi4_0_dbusaxi_translator_m0_wready;          // VexRiscvAxi4_0_dBusaxi_agent:wready -> VexRiscvAxi4_0_dBusaxi_translator:m0_wready
	wire    [0:0] vexriscvaxi4_0_dbusaxi_translator_m0_rid;             // VexRiscvAxi4_0_dBusaxi_agent:rid -> VexRiscvAxi4_0_dBusaxi_translator:m0_rid
	wire          vexriscvaxi4_0_dbusaxi_translator_m0_rready;          // VexRiscvAxi4_0_dBusaxi_translator:m0_rready -> VexRiscvAxi4_0_dBusaxi_agent:rready
	wire    [7:0] vexriscvaxi4_0_dbusaxi_translator_m0_awlen;           // VexRiscvAxi4_0_dBusaxi_translator:m0_awlen -> VexRiscvAxi4_0_dBusaxi_agent:awlen
	wire    [3:0] vexriscvaxi4_0_dbusaxi_translator_m0_awqos;           // VexRiscvAxi4_0_dBusaxi_translator:m0_awqos -> VexRiscvAxi4_0_dBusaxi_agent:awqos
	wire    [3:0] vexriscvaxi4_0_dbusaxi_translator_m0_arcache;         // VexRiscvAxi4_0_dBusaxi_translator:m0_arcache -> VexRiscvAxi4_0_dBusaxi_agent:arcache
	wire          vexriscvaxi4_0_dbusaxi_translator_m0_wvalid;          // VexRiscvAxi4_0_dBusaxi_translator:m0_wvalid -> VexRiscvAxi4_0_dBusaxi_agent:wvalid
	wire   [31:0] vexriscvaxi4_0_dbusaxi_translator_m0_araddr;          // VexRiscvAxi4_0_dBusaxi_translator:m0_araddr -> VexRiscvAxi4_0_dBusaxi_agent:araddr
	wire    [2:0] vexriscvaxi4_0_dbusaxi_translator_m0_arprot;          // VexRiscvAxi4_0_dBusaxi_translator:m0_arprot -> VexRiscvAxi4_0_dBusaxi_agent:arprot
	wire    [2:0] vexriscvaxi4_0_dbusaxi_translator_m0_awprot;          // VexRiscvAxi4_0_dBusaxi_translator:m0_awprot -> VexRiscvAxi4_0_dBusaxi_agent:awprot
	wire   [31:0] vexriscvaxi4_0_dbusaxi_translator_m0_wdata;           // VexRiscvAxi4_0_dBusaxi_translator:m0_wdata -> VexRiscvAxi4_0_dBusaxi_agent:wdata
	wire          vexriscvaxi4_0_dbusaxi_translator_m0_arvalid;         // VexRiscvAxi4_0_dBusaxi_translator:m0_arvalid -> VexRiscvAxi4_0_dBusaxi_agent:arvalid
	wire    [3:0] vexriscvaxi4_0_dbusaxi_translator_m0_awcache;         // VexRiscvAxi4_0_dBusaxi_translator:m0_awcache -> VexRiscvAxi4_0_dBusaxi_agent:awcache
	wire    [0:0] vexriscvaxi4_0_dbusaxi_translator_m0_arid;            // VexRiscvAxi4_0_dBusaxi_translator:m0_arid -> VexRiscvAxi4_0_dBusaxi_agent:arid
	wire    [0:0] vexriscvaxi4_0_dbusaxi_translator_m0_arlock;          // VexRiscvAxi4_0_dBusaxi_translator:m0_arlock -> VexRiscvAxi4_0_dBusaxi_agent:arlock
	wire    [0:0] vexriscvaxi4_0_dbusaxi_translator_m0_awlock;          // VexRiscvAxi4_0_dBusaxi_translator:m0_awlock -> VexRiscvAxi4_0_dBusaxi_agent:awlock
	wire   [31:0] vexriscvaxi4_0_dbusaxi_translator_m0_awaddr;          // VexRiscvAxi4_0_dBusaxi_translator:m0_awaddr -> VexRiscvAxi4_0_dBusaxi_agent:awaddr
	wire    [1:0] vexriscvaxi4_0_dbusaxi_translator_m0_bresp;           // VexRiscvAxi4_0_dBusaxi_agent:bresp -> VexRiscvAxi4_0_dBusaxi_translator:m0_bresp
	wire          vexriscvaxi4_0_dbusaxi_translator_m0_arready;         // VexRiscvAxi4_0_dBusaxi_agent:arready -> VexRiscvAxi4_0_dBusaxi_translator:m0_arready
	wire   [31:0] vexriscvaxi4_0_dbusaxi_translator_m0_rdata;           // VexRiscvAxi4_0_dBusaxi_agent:rdata -> VexRiscvAxi4_0_dBusaxi_translator:m0_rdata
	wire          vexriscvaxi4_0_dbusaxi_translator_m0_awready;         // VexRiscvAxi4_0_dBusaxi_agent:awready -> VexRiscvAxi4_0_dBusaxi_translator:m0_awready
	wire    [1:0] vexriscvaxi4_0_dbusaxi_translator_m0_arburst;         // VexRiscvAxi4_0_dBusaxi_translator:m0_arburst -> VexRiscvAxi4_0_dBusaxi_agent:arburst
	wire    [2:0] vexriscvaxi4_0_dbusaxi_translator_m0_arsize;          // VexRiscvAxi4_0_dBusaxi_translator:m0_arsize -> VexRiscvAxi4_0_dBusaxi_agent:arsize
	wire          vexriscvaxi4_0_dbusaxi_translator_m0_bready;          // VexRiscvAxi4_0_dBusaxi_translator:m0_bready -> VexRiscvAxi4_0_dBusaxi_agent:bready
	wire          vexriscvaxi4_0_dbusaxi_translator_m0_rlast;           // VexRiscvAxi4_0_dBusaxi_agent:rlast -> VexRiscvAxi4_0_dBusaxi_translator:m0_rlast
	wire          vexriscvaxi4_0_dbusaxi_translator_m0_wlast;           // VexRiscvAxi4_0_dBusaxi_translator:m0_wlast -> VexRiscvAxi4_0_dBusaxi_agent:wlast
	wire    [3:0] vexriscvaxi4_0_dbusaxi_translator_m0_awregion;        // VexRiscvAxi4_0_dBusaxi_translator:m0_awregion -> VexRiscvAxi4_0_dBusaxi_agent:awregion
	wire    [0:0] vexriscvaxi4_0_dbusaxi_translator_m0_buser;           // VexRiscvAxi4_0_dBusaxi_agent:buser -> VexRiscvAxi4_0_dBusaxi_translator:m0_buser
	wire    [1:0] vexriscvaxi4_0_dbusaxi_translator_m0_rresp;           // VexRiscvAxi4_0_dBusaxi_agent:rresp -> VexRiscvAxi4_0_dBusaxi_translator:m0_rresp
	wire    [0:0] vexriscvaxi4_0_dbusaxi_translator_m0_awid;            // VexRiscvAxi4_0_dBusaxi_translator:m0_awid -> VexRiscvAxi4_0_dBusaxi_agent:awid
	wire    [0:0] vexriscvaxi4_0_dbusaxi_translator_m0_bid;             // VexRiscvAxi4_0_dBusaxi_agent:bid -> VexRiscvAxi4_0_dBusaxi_translator:m0_bid
	wire          vexriscvaxi4_0_dbusaxi_translator_m0_bvalid;          // VexRiscvAxi4_0_dBusaxi_agent:bvalid -> VexRiscvAxi4_0_dBusaxi_translator:m0_bvalid
	wire    [2:0] vexriscvaxi4_0_dbusaxi_translator_m0_awsize;          // VexRiscvAxi4_0_dBusaxi_translator:m0_awsize -> VexRiscvAxi4_0_dBusaxi_agent:awsize
	wire          vexriscvaxi4_0_dbusaxi_translator_m0_awvalid;         // VexRiscvAxi4_0_dBusaxi_translator:m0_awvalid -> VexRiscvAxi4_0_dBusaxi_agent:awvalid
	wire    [0:0] vexriscvaxi4_0_dbusaxi_translator_m0_aruser;          // VexRiscvAxi4_0_dBusaxi_translator:m0_aruser -> VexRiscvAxi4_0_dBusaxi_agent:aruser
	wire          vexriscvaxi4_0_dbusaxi_translator_m0_rvalid;          // VexRiscvAxi4_0_dBusaxi_agent:rvalid -> VexRiscvAxi4_0_dBusaxi_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                    // rsp_mux:src_valid -> VexRiscvAxi4_0_dBusaxi_agent:write_rp_valid
	wire  [127:0] rsp_mux_src_data;                                     // rsp_mux:src_data -> VexRiscvAxi4_0_dBusaxi_agent:write_rp_data
	wire          rsp_mux_src_ready;                                    // VexRiscvAxi4_0_dBusaxi_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                  // rsp_mux:src_channel -> VexRiscvAxi4_0_dBusaxi_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                            // rsp_mux:src_startofpacket -> VexRiscvAxi4_0_dBusaxi_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                              // rsp_mux:src_endofpacket -> VexRiscvAxi4_0_dBusaxi_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                // rsp_mux_001:src_valid -> VexRiscvAxi4_0_dBusaxi_agent:read_rp_valid
	wire  [127:0] rsp_mux_001_src_data;                                 // rsp_mux_001:src_data -> VexRiscvAxi4_0_dBusaxi_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                // VexRiscvAxi4_0_dBusaxi_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [3:0] rsp_mux_001_src_channel;                              // rsp_mux_001:src_channel -> VexRiscvAxi4_0_dBusaxi_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                        // rsp_mux_001:src_startofpacket -> VexRiscvAxi4_0_dBusaxi_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                          // rsp_mux_001:src_endofpacket -> VexRiscvAxi4_0_dBusaxi_agent:read_rp_endofpacket
	wire    [0:0] vexriscvaxi4_0_ibusaxi_translator_m0_ruser;           // VexRiscvAxi4_0_iBusaxi_agent:ruser -> VexRiscvAxi4_0_iBusaxi_translator:m0_ruser
	wire    [0:0] vexriscvaxi4_0_ibusaxi_translator_m0_wuser;           // VexRiscvAxi4_0_iBusaxi_translator:m0_wuser -> VexRiscvAxi4_0_iBusaxi_agent:wuser
	wire    [1:0] vexriscvaxi4_0_ibusaxi_translator_m0_awburst;         // VexRiscvAxi4_0_iBusaxi_translator:m0_awburst -> VexRiscvAxi4_0_iBusaxi_agent:awburst
	wire    [3:0] vexriscvaxi4_0_ibusaxi_translator_m0_arregion;        // VexRiscvAxi4_0_iBusaxi_translator:m0_arregion -> VexRiscvAxi4_0_iBusaxi_agent:arregion
	wire    [0:0] vexriscvaxi4_0_ibusaxi_translator_m0_awuser;          // VexRiscvAxi4_0_iBusaxi_translator:m0_awuser -> VexRiscvAxi4_0_iBusaxi_agent:awuser
	wire    [7:0] vexriscvaxi4_0_ibusaxi_translator_m0_arlen;           // VexRiscvAxi4_0_iBusaxi_translator:m0_arlen -> VexRiscvAxi4_0_iBusaxi_agent:arlen
	wire    [3:0] vexriscvaxi4_0_ibusaxi_translator_m0_arqos;           // VexRiscvAxi4_0_iBusaxi_translator:m0_arqos -> VexRiscvAxi4_0_iBusaxi_agent:arqos
	wire    [3:0] vexriscvaxi4_0_ibusaxi_translator_m0_wstrb;           // VexRiscvAxi4_0_iBusaxi_translator:m0_wstrb -> VexRiscvAxi4_0_iBusaxi_agent:wstrb
	wire          vexriscvaxi4_0_ibusaxi_translator_m0_wready;          // VexRiscvAxi4_0_iBusaxi_agent:wready -> VexRiscvAxi4_0_iBusaxi_translator:m0_wready
	wire    [0:0] vexriscvaxi4_0_ibusaxi_translator_m0_rid;             // VexRiscvAxi4_0_iBusaxi_agent:rid -> VexRiscvAxi4_0_iBusaxi_translator:m0_rid
	wire          vexriscvaxi4_0_ibusaxi_translator_m0_rready;          // VexRiscvAxi4_0_iBusaxi_translator:m0_rready -> VexRiscvAxi4_0_iBusaxi_agent:rready
	wire    [7:0] vexriscvaxi4_0_ibusaxi_translator_m0_awlen;           // VexRiscvAxi4_0_iBusaxi_translator:m0_awlen -> VexRiscvAxi4_0_iBusaxi_agent:awlen
	wire    [3:0] vexriscvaxi4_0_ibusaxi_translator_m0_awqos;           // VexRiscvAxi4_0_iBusaxi_translator:m0_awqos -> VexRiscvAxi4_0_iBusaxi_agent:awqos
	wire    [3:0] vexriscvaxi4_0_ibusaxi_translator_m0_arcache;         // VexRiscvAxi4_0_iBusaxi_translator:m0_arcache -> VexRiscvAxi4_0_iBusaxi_agent:arcache
	wire          vexriscvaxi4_0_ibusaxi_translator_m0_wvalid;          // VexRiscvAxi4_0_iBusaxi_translator:m0_wvalid -> VexRiscvAxi4_0_iBusaxi_agent:wvalid
	wire   [31:0] vexriscvaxi4_0_ibusaxi_translator_m0_araddr;          // VexRiscvAxi4_0_iBusaxi_translator:m0_araddr -> VexRiscvAxi4_0_iBusaxi_agent:araddr
	wire    [2:0] vexriscvaxi4_0_ibusaxi_translator_m0_arprot;          // VexRiscvAxi4_0_iBusaxi_translator:m0_arprot -> VexRiscvAxi4_0_iBusaxi_agent:arprot
	wire    [2:0] vexriscvaxi4_0_ibusaxi_translator_m0_awprot;          // VexRiscvAxi4_0_iBusaxi_translator:m0_awprot -> VexRiscvAxi4_0_iBusaxi_agent:awprot
	wire   [31:0] vexriscvaxi4_0_ibusaxi_translator_m0_wdata;           // VexRiscvAxi4_0_iBusaxi_translator:m0_wdata -> VexRiscvAxi4_0_iBusaxi_agent:wdata
	wire          vexriscvaxi4_0_ibusaxi_translator_m0_arvalid;         // VexRiscvAxi4_0_iBusaxi_translator:m0_arvalid -> VexRiscvAxi4_0_iBusaxi_agent:arvalid
	wire    [3:0] vexriscvaxi4_0_ibusaxi_translator_m0_awcache;         // VexRiscvAxi4_0_iBusaxi_translator:m0_awcache -> VexRiscvAxi4_0_iBusaxi_agent:awcache
	wire    [0:0] vexriscvaxi4_0_ibusaxi_translator_m0_arid;            // VexRiscvAxi4_0_iBusaxi_translator:m0_arid -> VexRiscvAxi4_0_iBusaxi_agent:arid
	wire    [0:0] vexriscvaxi4_0_ibusaxi_translator_m0_arlock;          // VexRiscvAxi4_0_iBusaxi_translator:m0_arlock -> VexRiscvAxi4_0_iBusaxi_agent:arlock
	wire    [0:0] vexriscvaxi4_0_ibusaxi_translator_m0_awlock;          // VexRiscvAxi4_0_iBusaxi_translator:m0_awlock -> VexRiscvAxi4_0_iBusaxi_agent:awlock
	wire   [31:0] vexriscvaxi4_0_ibusaxi_translator_m0_awaddr;          // VexRiscvAxi4_0_iBusaxi_translator:m0_awaddr -> VexRiscvAxi4_0_iBusaxi_agent:awaddr
	wire    [1:0] vexriscvaxi4_0_ibusaxi_translator_m0_bresp;           // VexRiscvAxi4_0_iBusaxi_agent:bresp -> VexRiscvAxi4_0_iBusaxi_translator:m0_bresp
	wire          vexriscvaxi4_0_ibusaxi_translator_m0_arready;         // VexRiscvAxi4_0_iBusaxi_agent:arready -> VexRiscvAxi4_0_iBusaxi_translator:m0_arready
	wire   [31:0] vexriscvaxi4_0_ibusaxi_translator_m0_rdata;           // VexRiscvAxi4_0_iBusaxi_agent:rdata -> VexRiscvAxi4_0_iBusaxi_translator:m0_rdata
	wire          vexriscvaxi4_0_ibusaxi_translator_m0_awready;         // VexRiscvAxi4_0_iBusaxi_agent:awready -> VexRiscvAxi4_0_iBusaxi_translator:m0_awready
	wire    [1:0] vexriscvaxi4_0_ibusaxi_translator_m0_arburst;         // VexRiscvAxi4_0_iBusaxi_translator:m0_arburst -> VexRiscvAxi4_0_iBusaxi_agent:arburst
	wire    [2:0] vexriscvaxi4_0_ibusaxi_translator_m0_arsize;          // VexRiscvAxi4_0_iBusaxi_translator:m0_arsize -> VexRiscvAxi4_0_iBusaxi_agent:arsize
	wire          vexriscvaxi4_0_ibusaxi_translator_m0_bready;          // VexRiscvAxi4_0_iBusaxi_translator:m0_bready -> VexRiscvAxi4_0_iBusaxi_agent:bready
	wire          vexriscvaxi4_0_ibusaxi_translator_m0_rlast;           // VexRiscvAxi4_0_iBusaxi_agent:rlast -> VexRiscvAxi4_0_iBusaxi_translator:m0_rlast
	wire          vexriscvaxi4_0_ibusaxi_translator_m0_wlast;           // VexRiscvAxi4_0_iBusaxi_translator:m0_wlast -> VexRiscvAxi4_0_iBusaxi_agent:wlast
	wire    [3:0] vexriscvaxi4_0_ibusaxi_translator_m0_awregion;        // VexRiscvAxi4_0_iBusaxi_translator:m0_awregion -> VexRiscvAxi4_0_iBusaxi_agent:awregion
	wire    [0:0] vexriscvaxi4_0_ibusaxi_translator_m0_buser;           // VexRiscvAxi4_0_iBusaxi_agent:buser -> VexRiscvAxi4_0_iBusaxi_translator:m0_buser
	wire    [1:0] vexriscvaxi4_0_ibusaxi_translator_m0_rresp;           // VexRiscvAxi4_0_iBusaxi_agent:rresp -> VexRiscvAxi4_0_iBusaxi_translator:m0_rresp
	wire    [0:0] vexriscvaxi4_0_ibusaxi_translator_m0_awid;            // VexRiscvAxi4_0_iBusaxi_translator:m0_awid -> VexRiscvAxi4_0_iBusaxi_agent:awid
	wire    [0:0] vexriscvaxi4_0_ibusaxi_translator_m0_bid;             // VexRiscvAxi4_0_iBusaxi_agent:bid -> VexRiscvAxi4_0_iBusaxi_translator:m0_bid
	wire          vexriscvaxi4_0_ibusaxi_translator_m0_bvalid;          // VexRiscvAxi4_0_iBusaxi_agent:bvalid -> VexRiscvAxi4_0_iBusaxi_translator:m0_bvalid
	wire    [2:0] vexriscvaxi4_0_ibusaxi_translator_m0_awsize;          // VexRiscvAxi4_0_iBusaxi_translator:m0_awsize -> VexRiscvAxi4_0_iBusaxi_agent:awsize
	wire          vexriscvaxi4_0_ibusaxi_translator_m0_awvalid;         // VexRiscvAxi4_0_iBusaxi_translator:m0_awvalid -> VexRiscvAxi4_0_iBusaxi_agent:awvalid
	wire    [0:0] vexriscvaxi4_0_ibusaxi_translator_m0_aruser;          // VexRiscvAxi4_0_iBusaxi_translator:m0_aruser -> VexRiscvAxi4_0_iBusaxi_agent:aruser
	wire          vexriscvaxi4_0_ibusaxi_translator_m0_rvalid;          // VexRiscvAxi4_0_iBusaxi_agent:rvalid -> VexRiscvAxi4_0_iBusaxi_translator:m0_rvalid
	wire          rsp_mux_002_src_valid;                                // rsp_mux_002:src_valid -> VexRiscvAxi4_0_iBusaxi_agent:write_rp_valid
	wire  [127:0] rsp_mux_002_src_data;                                 // rsp_mux_002:src_data -> VexRiscvAxi4_0_iBusaxi_agent:write_rp_data
	wire          rsp_mux_002_src_ready;                                // VexRiscvAxi4_0_iBusaxi_agent:write_rp_ready -> rsp_mux_002:src_ready
	wire    [3:0] rsp_mux_002_src_channel;                              // rsp_mux_002:src_channel -> VexRiscvAxi4_0_iBusaxi_agent:write_rp_channel
	wire          rsp_mux_002_src_startofpacket;                        // rsp_mux_002:src_startofpacket -> VexRiscvAxi4_0_iBusaxi_agent:write_rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                          // rsp_mux_002:src_endofpacket -> VexRiscvAxi4_0_iBusaxi_agent:write_rp_endofpacket
	wire          rsp_mux_003_src_valid;                                // rsp_mux_003:src_valid -> VexRiscvAxi4_0_iBusaxi_agent:read_rp_valid
	wire  [127:0] rsp_mux_003_src_data;                                 // rsp_mux_003:src_data -> VexRiscvAxi4_0_iBusaxi_agent:read_rp_data
	wire          rsp_mux_003_src_ready;                                // VexRiscvAxi4_0_iBusaxi_agent:read_rp_ready -> rsp_mux_003:src_ready
	wire    [3:0] rsp_mux_003_src_channel;                              // rsp_mux_003:src_channel -> VexRiscvAxi4_0_iBusaxi_agent:read_rp_channel
	wire          rsp_mux_003_src_startofpacket;                        // rsp_mux_003:src_startofpacket -> VexRiscvAxi4_0_iBusaxi_agent:read_rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                          // rsp_mux_003:src_endofpacket -> VexRiscvAxi4_0_iBusaxi_agent:read_rp_endofpacket
	wire   [31:0] onchip_memory_s1_agent_m0_readdata;                   // onchip_memory_s1_translator:uav_readdata -> onchip_memory_s1_agent:m0_readdata
	wire          onchip_memory_s1_agent_m0_waitrequest;                // onchip_memory_s1_translator:uav_waitrequest -> onchip_memory_s1_agent:m0_waitrequest
	wire          onchip_memory_s1_agent_m0_debugaccess;                // onchip_memory_s1_agent:m0_debugaccess -> onchip_memory_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory_s1_agent_m0_address;                    // onchip_memory_s1_agent:m0_address -> onchip_memory_s1_translator:uav_address
	wire    [3:0] onchip_memory_s1_agent_m0_byteenable;                 // onchip_memory_s1_agent:m0_byteenable -> onchip_memory_s1_translator:uav_byteenable
	wire          onchip_memory_s1_agent_m0_read;                       // onchip_memory_s1_agent:m0_read -> onchip_memory_s1_translator:uav_read
	wire          onchip_memory_s1_agent_m0_readdatavalid;              // onchip_memory_s1_translator:uav_readdatavalid -> onchip_memory_s1_agent:m0_readdatavalid
	wire          onchip_memory_s1_agent_m0_lock;                       // onchip_memory_s1_agent:m0_lock -> onchip_memory_s1_translator:uav_lock
	wire   [31:0] onchip_memory_s1_agent_m0_writedata;                  // onchip_memory_s1_agent:m0_writedata -> onchip_memory_s1_translator:uav_writedata
	wire          onchip_memory_s1_agent_m0_write;                      // onchip_memory_s1_agent:m0_write -> onchip_memory_s1_translator:uav_write
	wire    [2:0] onchip_memory_s1_agent_m0_burstcount;                 // onchip_memory_s1_agent:m0_burstcount -> onchip_memory_s1_translator:uav_burstcount
	wire          onchip_memory_s1_agent_rf_source_valid;               // onchip_memory_s1_agent:rf_source_valid -> onchip_memory_s1_agent_rsp_fifo:in_valid
	wire  [128:0] onchip_memory_s1_agent_rf_source_data;                // onchip_memory_s1_agent:rf_source_data -> onchip_memory_s1_agent_rsp_fifo:in_data
	wire          onchip_memory_s1_agent_rf_source_ready;               // onchip_memory_s1_agent_rsp_fifo:in_ready -> onchip_memory_s1_agent:rf_source_ready
	wire          onchip_memory_s1_agent_rf_source_startofpacket;       // onchip_memory_s1_agent:rf_source_startofpacket -> onchip_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory_s1_agent_rf_source_endofpacket;         // onchip_memory_s1_agent:rf_source_endofpacket -> onchip_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_valid;            // onchip_memory_s1_agent_rsp_fifo:out_valid -> onchip_memory_s1_agent:rf_sink_valid
	wire  [128:0] onchip_memory_s1_agent_rsp_fifo_out_data;             // onchip_memory_s1_agent_rsp_fifo:out_data -> onchip_memory_s1_agent:rf_sink_data
	wire          onchip_memory_s1_agent_rsp_fifo_out_ready;            // onchip_memory_s1_agent:rf_sink_ready -> onchip_memory_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory_s1_agent_rsp_fifo_out_startofpacket;    // onchip_memory_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory_s1_agent:rf_sink_startofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_endofpacket;      // onchip_memory_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory_s1_agent:rf_sink_endofpacket
	wire          onchip_memory_s1_agent_rdata_fifo_src_valid;          // onchip_memory_s1_agent:rdata_fifo_src_valid -> onchip_memory_s1_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_memory_s1_agent_rdata_fifo_src_data;           // onchip_memory_s1_agent:rdata_fifo_src_data -> onchip_memory_s1_agent_rdata_fifo:in_data
	wire          onchip_memory_s1_agent_rdata_fifo_src_ready;          // onchip_memory_s1_agent_rdata_fifo:in_ready -> onchip_memory_s1_agent:rdata_fifo_src_ready
	wire          onchip_memory_s1_agent_rdata_fifo_out_valid;          // onchip_memory_s1_agent_rdata_fifo:out_valid -> onchip_memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] onchip_memory_s1_agent_rdata_fifo_out_data;           // onchip_memory_s1_agent_rdata_fifo:out_data -> onchip_memory_s1_agent:rdata_fifo_sink_data
	wire          onchip_memory_s1_agent_rdata_fifo_out_ready;          // onchip_memory_s1_agent:rdata_fifo_sink_ready -> onchip_memory_s1_agent_rdata_fifo:out_ready
	wire          vexriscvaxi4_0_dbusaxi_agent_write_cp_valid;          // VexRiscvAxi4_0_dBusaxi_agent:write_cp_valid -> router:sink_valid
	wire  [127:0] vexriscvaxi4_0_dbusaxi_agent_write_cp_data;           // VexRiscvAxi4_0_dBusaxi_agent:write_cp_data -> router:sink_data
	wire          vexriscvaxi4_0_dbusaxi_agent_write_cp_ready;          // router:sink_ready -> VexRiscvAxi4_0_dBusaxi_agent:write_cp_ready
	wire          vexriscvaxi4_0_dbusaxi_agent_write_cp_startofpacket;  // VexRiscvAxi4_0_dBusaxi_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          vexriscvaxi4_0_dbusaxi_agent_write_cp_endofpacket;    // VexRiscvAxi4_0_dBusaxi_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                     // router:src_valid -> cmd_demux:sink_valid
	wire  [127:0] router_src_data;                                      // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                     // cmd_demux:sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                   // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                             // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                               // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          vexriscvaxi4_0_dbusaxi_agent_read_cp_valid;           // VexRiscvAxi4_0_dBusaxi_agent:read_cp_valid -> router_001:sink_valid
	wire  [127:0] vexriscvaxi4_0_dbusaxi_agent_read_cp_data;            // VexRiscvAxi4_0_dBusaxi_agent:read_cp_data -> router_001:sink_data
	wire          vexriscvaxi4_0_dbusaxi_agent_read_cp_ready;           // router_001:sink_ready -> VexRiscvAxi4_0_dBusaxi_agent:read_cp_ready
	wire          vexriscvaxi4_0_dbusaxi_agent_read_cp_startofpacket;   // VexRiscvAxi4_0_dBusaxi_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          vexriscvaxi4_0_dbusaxi_agent_read_cp_endofpacket;     // VexRiscvAxi4_0_dBusaxi_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                 // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [127:0] router_001_src_data;                                  // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                 // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                               // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                         // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                           // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          vexriscvaxi4_0_ibusaxi_agent_write_cp_valid;          // VexRiscvAxi4_0_iBusaxi_agent:write_cp_valid -> router_002:sink_valid
	wire  [127:0] vexriscvaxi4_0_ibusaxi_agent_write_cp_data;           // VexRiscvAxi4_0_iBusaxi_agent:write_cp_data -> router_002:sink_data
	wire          vexriscvaxi4_0_ibusaxi_agent_write_cp_ready;          // router_002:sink_ready -> VexRiscvAxi4_0_iBusaxi_agent:write_cp_ready
	wire          vexriscvaxi4_0_ibusaxi_agent_write_cp_startofpacket;  // VexRiscvAxi4_0_iBusaxi_agent:write_cp_startofpacket -> router_002:sink_startofpacket
	wire          vexriscvaxi4_0_ibusaxi_agent_write_cp_endofpacket;    // VexRiscvAxi4_0_iBusaxi_agent:write_cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                 // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [127:0] router_002_src_data;                                  // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                 // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                               // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                         // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                           // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          vexriscvaxi4_0_ibusaxi_agent_read_cp_valid;           // VexRiscvAxi4_0_iBusaxi_agent:read_cp_valid -> router_003:sink_valid
	wire  [127:0] vexriscvaxi4_0_ibusaxi_agent_read_cp_data;            // VexRiscvAxi4_0_iBusaxi_agent:read_cp_data -> router_003:sink_data
	wire          vexriscvaxi4_0_ibusaxi_agent_read_cp_ready;           // router_003:sink_ready -> VexRiscvAxi4_0_iBusaxi_agent:read_cp_ready
	wire          vexriscvaxi4_0_ibusaxi_agent_read_cp_startofpacket;   // VexRiscvAxi4_0_iBusaxi_agent:read_cp_startofpacket -> router_003:sink_startofpacket
	wire          vexriscvaxi4_0_ibusaxi_agent_read_cp_endofpacket;     // VexRiscvAxi4_0_iBusaxi_agent:read_cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                 // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [127:0] router_003_src_data;                                  // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                 // cmd_demux_003:sink_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                               // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                         // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                           // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          onchip_memory_s1_agent_rp_valid;                      // onchip_memory_s1_agent:rp_valid -> router_004:sink_valid
	wire  [127:0] onchip_memory_s1_agent_rp_data;                       // onchip_memory_s1_agent:rp_data -> router_004:sink_data
	wire          onchip_memory_s1_agent_rp_ready;                      // router_004:sink_ready -> onchip_memory_s1_agent:rp_ready
	wire          onchip_memory_s1_agent_rp_startofpacket;              // onchip_memory_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          onchip_memory_s1_agent_rp_endofpacket;                // onchip_memory_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                 // router_004:src_valid -> rsp_demux:sink_valid
	wire  [127:0] router_004_src_data;                                  // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                 // rsp_demux:sink_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                               // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                         // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                           // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                    // cmd_mux:src_valid -> onchip_memory_s1_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_src_data;                                     // cmd_mux:src_data -> onchip_memory_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                    // onchip_memory_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                  // cmd_mux:src_channel -> onchip_memory_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                            // cmd_mux:src_startofpacket -> onchip_memory_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                              // cmd_mux:src_endofpacket -> onchip_memory_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory_s1_burst_adapter_source0_valid;         // onchip_memory_s1_burst_adapter:source0_valid -> onchip_memory_s1_agent:cp_valid
	wire  [127:0] onchip_memory_s1_burst_adapter_source0_data;          // onchip_memory_s1_burst_adapter:source0_data -> onchip_memory_s1_agent:cp_data
	wire          onchip_memory_s1_burst_adapter_source0_ready;         // onchip_memory_s1_agent:cp_ready -> onchip_memory_s1_burst_adapter:source0_ready
	wire    [3:0] onchip_memory_s1_burst_adapter_source0_channel;       // onchip_memory_s1_burst_adapter:source0_channel -> onchip_memory_s1_agent:cp_channel
	wire          onchip_memory_s1_burst_adapter_source0_startofpacket; // onchip_memory_s1_burst_adapter:source0_startofpacket -> onchip_memory_s1_agent:cp_startofpacket
	wire          onchip_memory_s1_burst_adapter_source0_endofpacket;   // onchip_memory_s1_burst_adapter:source0_endofpacket -> onchip_memory_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                 // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [127:0] cmd_demux_src0_data;                                  // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                 // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                               // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                         // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                           // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                             // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [127:0] cmd_demux_001_src0_data;                              // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                             // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [3:0] cmd_demux_001_src0_channel;                           // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                     // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                       // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                             // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [127:0] cmd_demux_002_src0_data;                              // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                             // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire    [3:0] cmd_demux_002_src0_channel;                           // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                     // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                       // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                             // cmd_demux_003:src0_valid -> cmd_mux:sink3_valid
	wire  [127:0] cmd_demux_003_src0_data;                              // cmd_demux_003:src0_data -> cmd_mux:sink3_data
	wire          cmd_demux_003_src0_ready;                             // cmd_mux:sink3_ready -> cmd_demux_003:src0_ready
	wire    [3:0] cmd_demux_003_src0_channel;                           // cmd_demux_003:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                     // cmd_demux_003:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                       // cmd_demux_003:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                 // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [127:0] rsp_demux_src0_data;                                  // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                 // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                               // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                         // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                           // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                 // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [127:0] rsp_demux_src1_data;                                  // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                 // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [3:0] rsp_demux_src1_channel;                               // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                         // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                           // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                 // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [127:0] rsp_demux_src2_data;                                  // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                 // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire    [3:0] rsp_demux_src2_channel;                               // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                         // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                           // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                 // rsp_demux:src3_valid -> rsp_mux_003:sink0_valid
	wire  [127:0] rsp_demux_src3_data;                                  // rsp_demux:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_src3_ready;                                 // rsp_mux_003:sink0_ready -> rsp_demux:src3_ready
	wire    [3:0] rsp_demux_src3_channel;                               // rsp_demux:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_src3_startofpacket;                         // rsp_demux:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_src3_endofpacket;                           // rsp_demux:src3_endofpacket -> rsp_mux_003:sink0_endofpacket

	bram_altera_merlin_axi_translator_191_fz5443y #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (1),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (1),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (1),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (32),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) vexriscvaxi4_0_dbusaxi_translator (
		.aclk        (clock_in_out_clk_clk),                              //   input,   width = 1,       clk.clk
		.aresetn     (~VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset_n
		.m0_awid     (vexriscvaxi4_0_dbusaxi_translator_m0_awid),         //  output,   width = 1,        m0.awid
		.m0_awaddr   (vexriscvaxi4_0_dbusaxi_translator_m0_awaddr),       //  output,  width = 32,          .awaddr
		.m0_awlen    (vexriscvaxi4_0_dbusaxi_translator_m0_awlen),        //  output,   width = 8,          .awlen
		.m0_awsize   (vexriscvaxi4_0_dbusaxi_translator_m0_awsize),       //  output,   width = 3,          .awsize
		.m0_awburst  (vexriscvaxi4_0_dbusaxi_translator_m0_awburst),      //  output,   width = 2,          .awburst
		.m0_awlock   (vexriscvaxi4_0_dbusaxi_translator_m0_awlock),       //  output,   width = 1,          .awlock
		.m0_awcache  (vexriscvaxi4_0_dbusaxi_translator_m0_awcache),      //  output,   width = 4,          .awcache
		.m0_awprot   (vexriscvaxi4_0_dbusaxi_translator_m0_awprot),       //  output,   width = 3,          .awprot
		.m0_awuser   (vexriscvaxi4_0_dbusaxi_translator_m0_awuser),       //  output,   width = 1,          .awuser
		.m0_awqos    (vexriscvaxi4_0_dbusaxi_translator_m0_awqos),        //  output,   width = 4,          .awqos
		.m0_awregion (vexriscvaxi4_0_dbusaxi_translator_m0_awregion),     //  output,   width = 4,          .awregion
		.m0_awvalid  (vexriscvaxi4_0_dbusaxi_translator_m0_awvalid),      //  output,   width = 1,          .awvalid
		.m0_awready  (vexriscvaxi4_0_dbusaxi_translator_m0_awready),      //   input,   width = 1,          .awready
		.m0_wdata    (vexriscvaxi4_0_dbusaxi_translator_m0_wdata),        //  output,  width = 32,          .wdata
		.m0_wstrb    (vexriscvaxi4_0_dbusaxi_translator_m0_wstrb),        //  output,   width = 4,          .wstrb
		.m0_wlast    (vexriscvaxi4_0_dbusaxi_translator_m0_wlast),        //  output,   width = 1,          .wlast
		.m0_wvalid   (vexriscvaxi4_0_dbusaxi_translator_m0_wvalid),       //  output,   width = 1,          .wvalid
		.m0_wuser    (vexriscvaxi4_0_dbusaxi_translator_m0_wuser),        //  output,   width = 1,          .wuser
		.m0_wready   (vexriscvaxi4_0_dbusaxi_translator_m0_wready),       //   input,   width = 1,          .wready
		.m0_bid      (vexriscvaxi4_0_dbusaxi_translator_m0_bid),          //   input,   width = 1,          .bid
		.m0_bresp    (vexriscvaxi4_0_dbusaxi_translator_m0_bresp),        //   input,   width = 2,          .bresp
		.m0_buser    (vexriscvaxi4_0_dbusaxi_translator_m0_buser),        //   input,   width = 1,          .buser
		.m0_bvalid   (vexriscvaxi4_0_dbusaxi_translator_m0_bvalid),       //   input,   width = 1,          .bvalid
		.m0_bready   (vexriscvaxi4_0_dbusaxi_translator_m0_bready),       //  output,   width = 1,          .bready
		.m0_arid     (vexriscvaxi4_0_dbusaxi_translator_m0_arid),         //  output,   width = 1,          .arid
		.m0_araddr   (vexriscvaxi4_0_dbusaxi_translator_m0_araddr),       //  output,  width = 32,          .araddr
		.m0_arlen    (vexriscvaxi4_0_dbusaxi_translator_m0_arlen),        //  output,   width = 8,          .arlen
		.m0_arsize   (vexriscvaxi4_0_dbusaxi_translator_m0_arsize),       //  output,   width = 3,          .arsize
		.m0_arburst  (vexriscvaxi4_0_dbusaxi_translator_m0_arburst),      //  output,   width = 2,          .arburst
		.m0_arlock   (vexriscvaxi4_0_dbusaxi_translator_m0_arlock),       //  output,   width = 1,          .arlock
		.m0_arcache  (vexriscvaxi4_0_dbusaxi_translator_m0_arcache),      //  output,   width = 4,          .arcache
		.m0_arprot   (vexriscvaxi4_0_dbusaxi_translator_m0_arprot),       //  output,   width = 3,          .arprot
		.m0_aruser   (vexriscvaxi4_0_dbusaxi_translator_m0_aruser),       //  output,   width = 1,          .aruser
		.m0_arqos    (vexriscvaxi4_0_dbusaxi_translator_m0_arqos),        //  output,   width = 4,          .arqos
		.m0_arregion (vexriscvaxi4_0_dbusaxi_translator_m0_arregion),     //  output,   width = 4,          .arregion
		.m0_arvalid  (vexriscvaxi4_0_dbusaxi_translator_m0_arvalid),      //  output,   width = 1,          .arvalid
		.m0_arready  (vexriscvaxi4_0_dbusaxi_translator_m0_arready),      //   input,   width = 1,          .arready
		.m0_rid      (vexriscvaxi4_0_dbusaxi_translator_m0_rid),          //   input,   width = 1,          .rid
		.m0_rdata    (vexriscvaxi4_0_dbusaxi_translator_m0_rdata),        //   input,  width = 32,          .rdata
		.m0_rresp    (vexriscvaxi4_0_dbusaxi_translator_m0_rresp),        //   input,   width = 2,          .rresp
		.m0_rlast    (vexriscvaxi4_0_dbusaxi_translator_m0_rlast),        //   input,   width = 1,          .rlast
		.m0_rvalid   (vexriscvaxi4_0_dbusaxi_translator_m0_rvalid),       //   input,   width = 1,          .rvalid
		.m0_rready   (vexriscvaxi4_0_dbusaxi_translator_m0_rready),       //  output,   width = 1,          .rready
		.m0_ruser    (vexriscvaxi4_0_dbusaxi_translator_m0_ruser),        //   input,   width = 1,          .ruser
		.s0_awid     (VexRiscvAxi4_0_dBusaxi_awid),                       //   input,   width = 1,        s0.awid
		.s0_awaddr   (VexRiscvAxi4_0_dBusaxi_awaddr),                     //   input,  width = 32,          .awaddr
		.s0_awlen    (VexRiscvAxi4_0_dBusaxi_awlen),                      //   input,   width = 8,          .awlen
		.s0_awsize   (VexRiscvAxi4_0_dBusaxi_awsize),                     //   input,   width = 3,          .awsize
		.s0_awburst  (VexRiscvAxi4_0_dBusaxi_awburst),                    //   input,   width = 2,          .awburst
		.s0_awlock   (VexRiscvAxi4_0_dBusaxi_awlock),                     //   input,   width = 1,          .awlock
		.s0_awcache  (VexRiscvAxi4_0_dBusaxi_awcache),                    //   input,   width = 4,          .awcache
		.s0_awprot   (VexRiscvAxi4_0_dBusaxi_awprot),                     //   input,   width = 3,          .awprot
		.s0_awqos    (VexRiscvAxi4_0_dBusaxi_awqos),                      //   input,   width = 4,          .awqos
		.s0_awregion (VexRiscvAxi4_0_dBusaxi_awregion),                   //   input,   width = 4,          .awregion
		.s0_awvalid  (VexRiscvAxi4_0_dBusaxi_awvalid),                    //   input,   width = 1,          .awvalid
		.s0_awready  (VexRiscvAxi4_0_dBusaxi_awready),                    //  output,   width = 1,          .awready
		.s0_wdata    (VexRiscvAxi4_0_dBusaxi_wdata),                      //   input,  width = 32,          .wdata
		.s0_wstrb    (VexRiscvAxi4_0_dBusaxi_wstrb),                      //   input,   width = 4,          .wstrb
		.s0_wlast    (VexRiscvAxi4_0_dBusaxi_wlast),                      //   input,   width = 1,          .wlast
		.s0_wvalid   (VexRiscvAxi4_0_dBusaxi_wvalid),                     //   input,   width = 1,          .wvalid
		.s0_wready   (VexRiscvAxi4_0_dBusaxi_wready),                     //  output,   width = 1,          .wready
		.s0_bid      (VexRiscvAxi4_0_dBusaxi_bid),                        //  output,   width = 1,          .bid
		.s0_bresp    (VexRiscvAxi4_0_dBusaxi_bresp),                      //  output,   width = 2,          .bresp
		.s0_bvalid   (VexRiscvAxi4_0_dBusaxi_bvalid),                     //  output,   width = 1,          .bvalid
		.s0_bready   (VexRiscvAxi4_0_dBusaxi_bready),                     //   input,   width = 1,          .bready
		.s0_arid     (VexRiscvAxi4_0_dBusaxi_arid),                       //   input,   width = 1,          .arid
		.s0_araddr   (VexRiscvAxi4_0_dBusaxi_araddr),                     //   input,  width = 32,          .araddr
		.s0_arlen    (VexRiscvAxi4_0_dBusaxi_arlen),                      //   input,   width = 8,          .arlen
		.s0_arsize   (VexRiscvAxi4_0_dBusaxi_arsize),                     //   input,   width = 3,          .arsize
		.s0_arburst  (VexRiscvAxi4_0_dBusaxi_arburst),                    //   input,   width = 2,          .arburst
		.s0_arlock   (VexRiscvAxi4_0_dBusaxi_arlock),                     //   input,   width = 1,          .arlock
		.s0_arcache  (VexRiscvAxi4_0_dBusaxi_arcache),                    //   input,   width = 4,          .arcache
		.s0_arprot   (VexRiscvAxi4_0_dBusaxi_arprot),                     //   input,   width = 3,          .arprot
		.s0_arqos    (VexRiscvAxi4_0_dBusaxi_arqos),                      //   input,   width = 4,          .arqos
		.s0_arregion (VexRiscvAxi4_0_dBusaxi_arregion),                   //   input,   width = 4,          .arregion
		.s0_arvalid  (VexRiscvAxi4_0_dBusaxi_arvalid),                    //   input,   width = 1,          .arvalid
		.s0_arready  (VexRiscvAxi4_0_dBusaxi_arready),                    //  output,   width = 1,          .arready
		.s0_rid      (VexRiscvAxi4_0_dBusaxi_rid),                        //  output,   width = 1,          .rid
		.s0_rdata    (VexRiscvAxi4_0_dBusaxi_rdata),                      //  output,  width = 32,          .rdata
		.s0_rresp    (VexRiscvAxi4_0_dBusaxi_rresp),                      //  output,   width = 2,          .rresp
		.s0_rlast    (VexRiscvAxi4_0_dBusaxi_rlast),                      //  output,   width = 1,          .rlast
		.s0_rvalid   (VexRiscvAxi4_0_dBusaxi_rvalid),                     //  output,   width = 1,          .rvalid
		.s0_rready   (VexRiscvAxi4_0_dBusaxi_rready),                     //   input,   width = 1,          .rready
		.s0_awuser   (1'b0),                                              // (terminated),                        
		.s0_wuser    (1'b0),                                              // (terminated),                        
		.s0_buser    (),                                                  // (terminated),                        
		.s0_aruser   (1'b0),                                              // (terminated),                        
		.s0_ruser    (),                                                  // (terminated),                        
		.s0_wid      (1'b0),                                              // (terminated),                        
		.s0_ardomain (2'b00),                                             // (terminated),                        
		.s0_arsnoop  (4'b0000),                                           // (terminated),                        
		.s0_arbar    (2'b00),                                             // (terminated),                        
		.s0_awdomain (2'b00),                                             // (terminated),                        
		.s0_awsnoop  (3'b000),                                            // (terminated),                        
		.s0_awbar    (2'b00),                                             // (terminated),                        
		.s0_awunique (1'b0),                                              // (terminated),                        
		.m0_wid      (),                                                  // (terminated),                        
		.m0_ardomain (),                                                  // (terminated),                        
		.m0_arsnoop  (),                                                  // (terminated),                        
		.m0_arbar    (),                                                  // (terminated),                        
		.m0_awdomain (),                                                  // (terminated),                        
		.m0_awsnoop  (),                                                  // (terminated),                        
		.m0_awbar    (),                                                  // (terminated),                        
		.m0_awunique ()                                                   // (terminated),                        
	);

	bram_altera_merlin_axi_translator_191_fz5443y #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (0),
		.USE_S0_AWSIZE                     (0),
		.USE_S0_AWBURST                    (0),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (0),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (0),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (0),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (1),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (32),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) vexriscvaxi4_0_ibusaxi_translator (
		.aclk        (clock_in_out_clk_clk),                              //   input,   width = 1,       clk.clk
		.aresetn     (~VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset_n
		.m0_awid     (vexriscvaxi4_0_ibusaxi_translator_m0_awid),         //  output,   width = 1,        m0.awid
		.m0_awaddr   (vexriscvaxi4_0_ibusaxi_translator_m0_awaddr),       //  output,  width = 32,          .awaddr
		.m0_awlen    (vexriscvaxi4_0_ibusaxi_translator_m0_awlen),        //  output,   width = 8,          .awlen
		.m0_awsize   (vexriscvaxi4_0_ibusaxi_translator_m0_awsize),       //  output,   width = 3,          .awsize
		.m0_awburst  (vexriscvaxi4_0_ibusaxi_translator_m0_awburst),      //  output,   width = 2,          .awburst
		.m0_awlock   (vexriscvaxi4_0_ibusaxi_translator_m0_awlock),       //  output,   width = 1,          .awlock
		.m0_awcache  (vexriscvaxi4_0_ibusaxi_translator_m0_awcache),      //  output,   width = 4,          .awcache
		.m0_awprot   (vexriscvaxi4_0_ibusaxi_translator_m0_awprot),       //  output,   width = 3,          .awprot
		.m0_awuser   (vexriscvaxi4_0_ibusaxi_translator_m0_awuser),       //  output,   width = 1,          .awuser
		.m0_awqos    (vexriscvaxi4_0_ibusaxi_translator_m0_awqos),        //  output,   width = 4,          .awqos
		.m0_awregion (vexriscvaxi4_0_ibusaxi_translator_m0_awregion),     //  output,   width = 4,          .awregion
		.m0_awvalid  (vexriscvaxi4_0_ibusaxi_translator_m0_awvalid),      //  output,   width = 1,          .awvalid
		.m0_awready  (vexriscvaxi4_0_ibusaxi_translator_m0_awready),      //   input,   width = 1,          .awready
		.m0_wdata    (vexriscvaxi4_0_ibusaxi_translator_m0_wdata),        //  output,  width = 32,          .wdata
		.m0_wstrb    (vexriscvaxi4_0_ibusaxi_translator_m0_wstrb),        //  output,   width = 4,          .wstrb
		.m0_wlast    (vexriscvaxi4_0_ibusaxi_translator_m0_wlast),        //  output,   width = 1,          .wlast
		.m0_wvalid   (vexriscvaxi4_0_ibusaxi_translator_m0_wvalid),       //  output,   width = 1,          .wvalid
		.m0_wuser    (vexriscvaxi4_0_ibusaxi_translator_m0_wuser),        //  output,   width = 1,          .wuser
		.m0_wready   (vexriscvaxi4_0_ibusaxi_translator_m0_wready),       //   input,   width = 1,          .wready
		.m0_bid      (vexriscvaxi4_0_ibusaxi_translator_m0_bid),          //   input,   width = 1,          .bid
		.m0_bresp    (vexriscvaxi4_0_ibusaxi_translator_m0_bresp),        //   input,   width = 2,          .bresp
		.m0_buser    (vexriscvaxi4_0_ibusaxi_translator_m0_buser),        //   input,   width = 1,          .buser
		.m0_bvalid   (vexriscvaxi4_0_ibusaxi_translator_m0_bvalid),       //   input,   width = 1,          .bvalid
		.m0_bready   (vexriscvaxi4_0_ibusaxi_translator_m0_bready),       //  output,   width = 1,          .bready
		.m0_arid     (vexriscvaxi4_0_ibusaxi_translator_m0_arid),         //  output,   width = 1,          .arid
		.m0_araddr   (vexriscvaxi4_0_ibusaxi_translator_m0_araddr),       //  output,  width = 32,          .araddr
		.m0_arlen    (vexriscvaxi4_0_ibusaxi_translator_m0_arlen),        //  output,   width = 8,          .arlen
		.m0_arsize   (vexriscvaxi4_0_ibusaxi_translator_m0_arsize),       //  output,   width = 3,          .arsize
		.m0_arburst  (vexriscvaxi4_0_ibusaxi_translator_m0_arburst),      //  output,   width = 2,          .arburst
		.m0_arlock   (vexriscvaxi4_0_ibusaxi_translator_m0_arlock),       //  output,   width = 1,          .arlock
		.m0_arcache  (vexriscvaxi4_0_ibusaxi_translator_m0_arcache),      //  output,   width = 4,          .arcache
		.m0_arprot   (vexriscvaxi4_0_ibusaxi_translator_m0_arprot),       //  output,   width = 3,          .arprot
		.m0_aruser   (vexriscvaxi4_0_ibusaxi_translator_m0_aruser),       //  output,   width = 1,          .aruser
		.m0_arqos    (vexriscvaxi4_0_ibusaxi_translator_m0_arqos),        //  output,   width = 4,          .arqos
		.m0_arregion (vexriscvaxi4_0_ibusaxi_translator_m0_arregion),     //  output,   width = 4,          .arregion
		.m0_arvalid  (vexriscvaxi4_0_ibusaxi_translator_m0_arvalid),      //  output,   width = 1,          .arvalid
		.m0_arready  (vexriscvaxi4_0_ibusaxi_translator_m0_arready),      //   input,   width = 1,          .arready
		.m0_rid      (vexriscvaxi4_0_ibusaxi_translator_m0_rid),          //   input,   width = 1,          .rid
		.m0_rdata    (vexriscvaxi4_0_ibusaxi_translator_m0_rdata),        //   input,  width = 32,          .rdata
		.m0_rresp    (vexriscvaxi4_0_ibusaxi_translator_m0_rresp),        //   input,   width = 2,          .rresp
		.m0_rlast    (vexriscvaxi4_0_ibusaxi_translator_m0_rlast),        //   input,   width = 1,          .rlast
		.m0_rvalid   (vexriscvaxi4_0_ibusaxi_translator_m0_rvalid),       //   input,   width = 1,          .rvalid
		.m0_rready   (vexriscvaxi4_0_ibusaxi_translator_m0_rready),       //  output,   width = 1,          .rready
		.m0_ruser    (vexriscvaxi4_0_ibusaxi_translator_m0_ruser),        //   input,   width = 1,          .ruser
		.s0_awid     (VexRiscvAxi4_0_iBusaxi_awid),                       //   input,   width = 1,        s0.awid
		.s0_awaddr   (VexRiscvAxi4_0_iBusaxi_awaddr),                     //   input,  width = 32,          .awaddr
		.s0_awlock   (VexRiscvAxi4_0_iBusaxi_awlock),                     //   input,   width = 1,          .awlock
		.s0_awprot   (VexRiscvAxi4_0_iBusaxi_awprot),                     //   input,   width = 3,          .awprot
		.s0_awvalid  (VexRiscvAxi4_0_iBusaxi_awvalid),                    //   input,   width = 1,          .awvalid
		.s0_awready  (VexRiscvAxi4_0_iBusaxi_awready),                    //  output,   width = 1,          .awready
		.s0_wdata    (VexRiscvAxi4_0_iBusaxi_wdata),                      //   input,  width = 32,          .wdata
		.s0_wlast    (VexRiscvAxi4_0_iBusaxi_wlast),                      //   input,   width = 1,          .wlast
		.s0_wvalid   (VexRiscvAxi4_0_iBusaxi_wvalid),                     //   input,   width = 1,          .wvalid
		.s0_wready   (VexRiscvAxi4_0_iBusaxi_wready),                     //  output,   width = 1,          .wready
		.s0_bid      (VexRiscvAxi4_0_iBusaxi_bid),                        //  output,   width = 1,          .bid
		.s0_bvalid   (VexRiscvAxi4_0_iBusaxi_bvalid),                     //  output,   width = 1,          .bvalid
		.s0_bready   (VexRiscvAxi4_0_iBusaxi_bready),                     //   input,   width = 1,          .bready
		.s0_arid     (VexRiscvAxi4_0_iBusaxi_arid),                       //   input,   width = 1,          .arid
		.s0_araddr   (VexRiscvAxi4_0_iBusaxi_araddr),                     //   input,  width = 32,          .araddr
		.s0_arlen    (VexRiscvAxi4_0_iBusaxi_arlen),                      //   input,   width = 8,          .arlen
		.s0_arsize   (VexRiscvAxi4_0_iBusaxi_arsize),                     //   input,   width = 3,          .arsize
		.s0_arburst  (VexRiscvAxi4_0_iBusaxi_arburst),                    //   input,   width = 2,          .arburst
		.s0_arlock   (VexRiscvAxi4_0_iBusaxi_arlock),                     //   input,   width = 1,          .arlock
		.s0_arcache  (VexRiscvAxi4_0_iBusaxi_arcache),                    //   input,   width = 4,          .arcache
		.s0_arprot   (VexRiscvAxi4_0_iBusaxi_arprot),                     //   input,   width = 3,          .arprot
		.s0_arqos    (VexRiscvAxi4_0_iBusaxi_arqos),                      //   input,   width = 4,          .arqos
		.s0_arregion (VexRiscvAxi4_0_iBusaxi_arregion),                   //   input,   width = 4,          .arregion
		.s0_arvalid  (VexRiscvAxi4_0_iBusaxi_arvalid),                    //   input,   width = 1,          .arvalid
		.s0_arready  (VexRiscvAxi4_0_iBusaxi_arready),                    //  output,   width = 1,          .arready
		.s0_rid      (VexRiscvAxi4_0_iBusaxi_rid),                        //  output,   width = 1,          .rid
		.s0_rdata    (VexRiscvAxi4_0_iBusaxi_rdata),                      //  output,  width = 32,          .rdata
		.s0_rresp    (VexRiscvAxi4_0_iBusaxi_rresp),                      //  output,   width = 2,          .rresp
		.s0_rlast    (VexRiscvAxi4_0_iBusaxi_rlast),                      //  output,   width = 1,          .rlast
		.s0_rvalid   (VexRiscvAxi4_0_iBusaxi_rvalid),                     //  output,   width = 1,          .rvalid
		.s0_rready   (VexRiscvAxi4_0_iBusaxi_rready),                     //   input,   width = 1,          .rready
		.s0_awlen    (8'b00000000),                                       // (terminated),                        
		.s0_awsize   (3'b000),                                            // (terminated),                        
		.s0_awburst  (2'b00),                                             // (terminated),                        
		.s0_awcache  (4'b0000),                                           // (terminated),                        
		.s0_awuser   (1'b0),                                              // (terminated),                        
		.s0_awqos    (4'b0000),                                           // (terminated),                        
		.s0_awregion (4'b0000),                                           // (terminated),                        
		.s0_wstrb    (4'b1111),                                           // (terminated),                        
		.s0_wuser    (1'b0),                                              // (terminated),                        
		.s0_bresp    (),                                                  // (terminated),                        
		.s0_buser    (),                                                  // (terminated),                        
		.s0_aruser   (1'b0),                                              // (terminated),                        
		.s0_ruser    (),                                                  // (terminated),                        
		.s0_wid      (1'b0),                                              // (terminated),                        
		.s0_ardomain (2'b00),                                             // (terminated),                        
		.s0_arsnoop  (4'b0000),                                           // (terminated),                        
		.s0_arbar    (2'b00),                                             // (terminated),                        
		.s0_awdomain (2'b00),                                             // (terminated),                        
		.s0_awsnoop  (3'b000),                                            // (terminated),                        
		.s0_awbar    (2'b00),                                             // (terminated),                        
		.s0_awunique (1'b0),                                              // (terminated),                        
		.m0_wid      (),                                                  // (terminated),                        
		.m0_ardomain (),                                                  // (terminated),                        
		.m0_arsnoop  (),                                                  // (terminated),                        
		.m0_arbar    (),                                                  // (terminated),                        
		.m0_awdomain (),                                                  // (terminated),                        
		.m0_awsnoop  (),                                                  // (terminated),                        
		.m0_awbar    (),                                                  // (terminated),                        
		.m0_awunique ()                                                   // (terminated),                        
	);

	bram_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) onchip_memory_s1_translator (
		.clk                    (clock_in_out_clk_clk),                             //   input,   width = 1,                      clk.clk
		.reset                  (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (onchip_memory_s1_agent_m0_address),                //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory_s1_agent_m0_burstcount),             //   input,   width = 3,                         .burstcount
		.uav_read               (onchip_memory_s1_agent_m0_read),                   //   input,   width = 1,                         .read
		.uav_write              (onchip_memory_s1_agent_m0_write),                  //   input,   width = 1,                         .write
		.uav_waitrequest        (onchip_memory_s1_agent_m0_waitrequest),            //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (onchip_memory_s1_agent_m0_readdatavalid),          //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (onchip_memory_s1_agent_m0_byteenable),             //   input,   width = 4,                         .byteenable
		.uav_readdata           (onchip_memory_s1_agent_m0_readdata),               //  output,  width = 32,                         .readdata
		.uav_writedata          (onchip_memory_s1_agent_m0_writedata),              //   input,  width = 32,                         .writedata
		.uav_lock               (onchip_memory_s1_agent_m0_lock),                   //   input,   width = 1,                         .lock
		.uav_debugaccess        (onchip_memory_s1_agent_m0_debugaccess),            //   input,   width = 1,                         .debugaccess
		.av_address             (onchip_memory_s1_address),                         //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (onchip_memory_s1_write),                           //  output,   width = 1,                         .write
		.av_readdata            (onchip_memory_s1_readdata),                        //   input,  width = 32,                         .readdata
		.av_writedata           (onchip_memory_s1_writedata),                       //  output,  width = 32,                         .writedata
		.av_byteenable          (onchip_memory_s1_byteenable),                      //  output,   width = 4,                         .byteenable
		.av_chipselect          (onchip_memory_s1_chipselect),                      //  output,   width = 1,                         .chipselect
		.av_clken               (onchip_memory_s1_clken),                           //  output,   width = 1,                         .clken
		.av_read                (),                                                 // (terminated),                                       
		.av_begintransfer       (),                                                 // (terminated),                                       
		.av_beginbursttransfer  (),                                                 // (terminated),                                       
		.av_burstcount          (),                                                 // (terminated),                                       
		.av_readdatavalid       (1'b0),                                             // (terminated),                                       
		.av_waitrequest         (1'b0),                                             // (terminated),                                       
		.av_writebyteenable     (),                                                 // (terminated),                                       
		.av_lock                (),                                                 // (terminated),                                       
		.uav_clken              (1'b0),                                             // (terminated),                                       
		.av_debugaccess         (),                                                 // (terminated),                                       
		.av_outputenable        (),                                                 // (terminated),                                       
		.uav_response           (),                                                 // (terminated),                                       
		.av_response            (2'b00),                                            // (terminated),                                       
		.uav_writeresponsevalid (),                                                 // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                              // (terminated),                                       
	);

	bram_altera_merlin_axi_master_ni_191_vbkraky #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (113),
		.PKT_CACHE_L               (110),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (105),
		.PKT_THREAD_ID_H           (106),
		.PKT_THREAD_ID_L           (106),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (103),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_DOMAIN_H              (126),
		.PKT_DOMAIN_L              (125),
		.PKT_SNOOP_H               (124),
		.PKT_SNOOP_L               (121),
		.PKT_BARRIER_H             (120),
		.PKT_BARRIER_L             (119),
		.PKT_WUNIQUE               (127),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (4),
		.ID                        (0),
		.SYNC_RESET                (0)
	) vexriscvaxi4_0_dbusaxi_agent (
		.aclk                   (clock_in_out_clk_clk),                                //   input,    width = 1,              clk.clk
		.aresetn                (~VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (vexriscvaxi4_0_dbusaxi_agent_write_cp_valid),         //  output,    width = 1,         write_cp.valid
		.write_cp_data          (vexriscvaxi4_0_dbusaxi_agent_write_cp_data),          //  output,  width = 128,                 .data
		.write_cp_startofpacket (vexriscvaxi4_0_dbusaxi_agent_write_cp_startofpacket), //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (vexriscvaxi4_0_dbusaxi_agent_write_cp_endofpacket),   //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (vexriscvaxi4_0_dbusaxi_agent_write_cp_ready),         //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                   //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                    //   input,  width = 128,                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                 //   input,    width = 4,                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                           //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                             //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                   //  output,    width = 1,                 .ready
		.read_cp_valid          (vexriscvaxi4_0_dbusaxi_agent_read_cp_valid),          //  output,    width = 1,          read_cp.valid
		.read_cp_data           (vexriscvaxi4_0_dbusaxi_agent_read_cp_data),           //  output,  width = 128,                 .data
		.read_cp_startofpacket  (vexriscvaxi4_0_dbusaxi_agent_read_cp_startofpacket),  //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (vexriscvaxi4_0_dbusaxi_agent_read_cp_endofpacket),    //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (vexriscvaxi4_0_dbusaxi_agent_read_cp_ready),          //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                               //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                //   input,  width = 128,                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                             //   input,    width = 4,                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                       //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                         //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                               //  output,    width = 1,                 .ready
		.awid                   (vexriscvaxi4_0_dbusaxi_translator_m0_awid),           //   input,    width = 1, altera_axi_slave.awid
		.awaddr                 (vexriscvaxi4_0_dbusaxi_translator_m0_awaddr),         //   input,   width = 32,                 .awaddr
		.awlen                  (vexriscvaxi4_0_dbusaxi_translator_m0_awlen),          //   input,    width = 8,                 .awlen
		.awsize                 (vexriscvaxi4_0_dbusaxi_translator_m0_awsize),         //   input,    width = 3,                 .awsize
		.awburst                (vexriscvaxi4_0_dbusaxi_translator_m0_awburst),        //   input,    width = 2,                 .awburst
		.awlock                 (vexriscvaxi4_0_dbusaxi_translator_m0_awlock),         //   input,    width = 1,                 .awlock
		.awcache                (vexriscvaxi4_0_dbusaxi_translator_m0_awcache),        //   input,    width = 4,                 .awcache
		.awprot                 (vexriscvaxi4_0_dbusaxi_translator_m0_awprot),         //   input,    width = 3,                 .awprot
		.awuser                 (vexriscvaxi4_0_dbusaxi_translator_m0_awuser),         //   input,    width = 1,                 .awuser
		.awqos                  (vexriscvaxi4_0_dbusaxi_translator_m0_awqos),          //   input,    width = 4,                 .awqos
		.awregion               (vexriscvaxi4_0_dbusaxi_translator_m0_awregion),       //   input,    width = 4,                 .awregion
		.awvalid                (vexriscvaxi4_0_dbusaxi_translator_m0_awvalid),        //   input,    width = 1,                 .awvalid
		.awready                (vexriscvaxi4_0_dbusaxi_translator_m0_awready),        //  output,    width = 1,                 .awready
		.wdata                  (vexriscvaxi4_0_dbusaxi_translator_m0_wdata),          //   input,   width = 32,                 .wdata
		.wstrb                  (vexriscvaxi4_0_dbusaxi_translator_m0_wstrb),          //   input,    width = 4,                 .wstrb
		.wlast                  (vexriscvaxi4_0_dbusaxi_translator_m0_wlast),          //   input,    width = 1,                 .wlast
		.wvalid                 (vexriscvaxi4_0_dbusaxi_translator_m0_wvalid),         //   input,    width = 1,                 .wvalid
		.wuser                  (vexriscvaxi4_0_dbusaxi_translator_m0_wuser),          //   input,    width = 1,                 .wuser
		.wready                 (vexriscvaxi4_0_dbusaxi_translator_m0_wready),         //  output,    width = 1,                 .wready
		.bid                    (vexriscvaxi4_0_dbusaxi_translator_m0_bid),            //  output,    width = 1,                 .bid
		.bresp                  (vexriscvaxi4_0_dbusaxi_translator_m0_bresp),          //  output,    width = 2,                 .bresp
		.buser                  (vexriscvaxi4_0_dbusaxi_translator_m0_buser),          //  output,    width = 1,                 .buser
		.bvalid                 (vexriscvaxi4_0_dbusaxi_translator_m0_bvalid),         //  output,    width = 1,                 .bvalid
		.bready                 (vexriscvaxi4_0_dbusaxi_translator_m0_bready),         //   input,    width = 1,                 .bready
		.arid                   (vexriscvaxi4_0_dbusaxi_translator_m0_arid),           //   input,    width = 1,                 .arid
		.araddr                 (vexriscvaxi4_0_dbusaxi_translator_m0_araddr),         //   input,   width = 32,                 .araddr
		.arlen                  (vexriscvaxi4_0_dbusaxi_translator_m0_arlen),          //   input,    width = 8,                 .arlen
		.arsize                 (vexriscvaxi4_0_dbusaxi_translator_m0_arsize),         //   input,    width = 3,                 .arsize
		.arburst                (vexriscvaxi4_0_dbusaxi_translator_m0_arburst),        //   input,    width = 2,                 .arburst
		.arlock                 (vexriscvaxi4_0_dbusaxi_translator_m0_arlock),         //   input,    width = 1,                 .arlock
		.arcache                (vexriscvaxi4_0_dbusaxi_translator_m0_arcache),        //   input,    width = 4,                 .arcache
		.arprot                 (vexriscvaxi4_0_dbusaxi_translator_m0_arprot),         //   input,    width = 3,                 .arprot
		.aruser                 (vexriscvaxi4_0_dbusaxi_translator_m0_aruser),         //   input,    width = 1,                 .aruser
		.arqos                  (vexriscvaxi4_0_dbusaxi_translator_m0_arqos),          //   input,    width = 4,                 .arqos
		.arregion               (vexriscvaxi4_0_dbusaxi_translator_m0_arregion),       //   input,    width = 4,                 .arregion
		.arvalid                (vexriscvaxi4_0_dbusaxi_translator_m0_arvalid),        //   input,    width = 1,                 .arvalid
		.arready                (vexriscvaxi4_0_dbusaxi_translator_m0_arready),        //  output,    width = 1,                 .arready
		.rid                    (vexriscvaxi4_0_dbusaxi_translator_m0_rid),            //  output,    width = 1,                 .rid
		.rdata                  (vexriscvaxi4_0_dbusaxi_translator_m0_rdata),          //  output,   width = 32,                 .rdata
		.rresp                  (vexriscvaxi4_0_dbusaxi_translator_m0_rresp),          //  output,    width = 2,                 .rresp
		.rlast                  (vexriscvaxi4_0_dbusaxi_translator_m0_rlast),          //  output,    width = 1,                 .rlast
		.rvalid                 (vexriscvaxi4_0_dbusaxi_translator_m0_rvalid),         //  output,    width = 1,                 .rvalid
		.rready                 (vexriscvaxi4_0_dbusaxi_translator_m0_rready),         //   input,    width = 1,                 .rready
		.ruser                  (vexriscvaxi4_0_dbusaxi_translator_m0_ruser),          //  output,    width = 1,                 .ruser
		.wid                    (1'b0)                                                 // (terminated),                                
	);

	bram_altera_merlin_axi_master_ni_191_vbkraky #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (113),
		.PKT_CACHE_L               (110),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (105),
		.PKT_THREAD_ID_H           (106),
		.PKT_THREAD_ID_L           (106),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (103),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_DOMAIN_H              (126),
		.PKT_DOMAIN_L              (125),
		.PKT_SNOOP_H               (124),
		.PKT_SNOOP_L               (121),
		.PKT_BARRIER_H             (120),
		.PKT_BARRIER_L             (119),
		.PKT_WUNIQUE               (127),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (4),
		.ID                        (1),
		.SYNC_RESET                (0)
	) vexriscvaxi4_0_ibusaxi_agent (
		.aclk                   (clock_in_out_clk_clk),                                //   input,    width = 1,              clk.clk
		.aresetn                (~VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (vexriscvaxi4_0_ibusaxi_agent_write_cp_valid),         //  output,    width = 1,         write_cp.valid
		.write_cp_data          (vexriscvaxi4_0_ibusaxi_agent_write_cp_data),          //  output,  width = 128,                 .data
		.write_cp_startofpacket (vexriscvaxi4_0_ibusaxi_agent_write_cp_startofpacket), //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (vexriscvaxi4_0_ibusaxi_agent_write_cp_endofpacket),   //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (vexriscvaxi4_0_ibusaxi_agent_write_cp_ready),         //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_002_src_valid),                               //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_002_src_data),                                //   input,  width = 128,                 .data
		.write_rp_channel       (rsp_mux_002_src_channel),                             //   input,    width = 4,                 .channel
		.write_rp_startofpacket (rsp_mux_002_src_startofpacket),                       //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_002_src_endofpacket),                         //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_002_src_ready),                               //  output,    width = 1,                 .ready
		.read_cp_valid          (vexriscvaxi4_0_ibusaxi_agent_read_cp_valid),          //  output,    width = 1,          read_cp.valid
		.read_cp_data           (vexriscvaxi4_0_ibusaxi_agent_read_cp_data),           //  output,  width = 128,                 .data
		.read_cp_startofpacket  (vexriscvaxi4_0_ibusaxi_agent_read_cp_startofpacket),  //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (vexriscvaxi4_0_ibusaxi_agent_read_cp_endofpacket),    //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (vexriscvaxi4_0_ibusaxi_agent_read_cp_ready),          //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_003_src_valid),                               //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_003_src_data),                                //   input,  width = 128,                 .data
		.read_rp_channel        (rsp_mux_003_src_channel),                             //   input,    width = 4,                 .channel
		.read_rp_startofpacket  (rsp_mux_003_src_startofpacket),                       //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_003_src_endofpacket),                         //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_003_src_ready),                               //  output,    width = 1,                 .ready
		.awid                   (vexriscvaxi4_0_ibusaxi_translator_m0_awid),           //   input,    width = 1, altera_axi_slave.awid
		.awaddr                 (vexriscvaxi4_0_ibusaxi_translator_m0_awaddr),         //   input,   width = 32,                 .awaddr
		.awlen                  (vexriscvaxi4_0_ibusaxi_translator_m0_awlen),          //   input,    width = 8,                 .awlen
		.awsize                 (vexriscvaxi4_0_ibusaxi_translator_m0_awsize),         //   input,    width = 3,                 .awsize
		.awburst                (vexriscvaxi4_0_ibusaxi_translator_m0_awburst),        //   input,    width = 2,                 .awburst
		.awlock                 (vexriscvaxi4_0_ibusaxi_translator_m0_awlock),         //   input,    width = 1,                 .awlock
		.awcache                (vexriscvaxi4_0_ibusaxi_translator_m0_awcache),        //   input,    width = 4,                 .awcache
		.awprot                 (vexriscvaxi4_0_ibusaxi_translator_m0_awprot),         //   input,    width = 3,                 .awprot
		.awuser                 (vexriscvaxi4_0_ibusaxi_translator_m0_awuser),         //   input,    width = 1,                 .awuser
		.awqos                  (vexriscvaxi4_0_ibusaxi_translator_m0_awqos),          //   input,    width = 4,                 .awqos
		.awregion               (vexriscvaxi4_0_ibusaxi_translator_m0_awregion),       //   input,    width = 4,                 .awregion
		.awvalid                (vexriscvaxi4_0_ibusaxi_translator_m0_awvalid),        //   input,    width = 1,                 .awvalid
		.awready                (vexriscvaxi4_0_ibusaxi_translator_m0_awready),        //  output,    width = 1,                 .awready
		.wdata                  (vexriscvaxi4_0_ibusaxi_translator_m0_wdata),          //   input,   width = 32,                 .wdata
		.wstrb                  (vexriscvaxi4_0_ibusaxi_translator_m0_wstrb),          //   input,    width = 4,                 .wstrb
		.wlast                  (vexriscvaxi4_0_ibusaxi_translator_m0_wlast),          //   input,    width = 1,                 .wlast
		.wvalid                 (vexriscvaxi4_0_ibusaxi_translator_m0_wvalid),         //   input,    width = 1,                 .wvalid
		.wuser                  (vexriscvaxi4_0_ibusaxi_translator_m0_wuser),          //   input,    width = 1,                 .wuser
		.wready                 (vexriscvaxi4_0_ibusaxi_translator_m0_wready),         //  output,    width = 1,                 .wready
		.bid                    (vexriscvaxi4_0_ibusaxi_translator_m0_bid),            //  output,    width = 1,                 .bid
		.bresp                  (vexriscvaxi4_0_ibusaxi_translator_m0_bresp),          //  output,    width = 2,                 .bresp
		.buser                  (vexriscvaxi4_0_ibusaxi_translator_m0_buser),          //  output,    width = 1,                 .buser
		.bvalid                 (vexriscvaxi4_0_ibusaxi_translator_m0_bvalid),         //  output,    width = 1,                 .bvalid
		.bready                 (vexriscvaxi4_0_ibusaxi_translator_m0_bready),         //   input,    width = 1,                 .bready
		.arid                   (vexriscvaxi4_0_ibusaxi_translator_m0_arid),           //   input,    width = 1,                 .arid
		.araddr                 (vexriscvaxi4_0_ibusaxi_translator_m0_araddr),         //   input,   width = 32,                 .araddr
		.arlen                  (vexriscvaxi4_0_ibusaxi_translator_m0_arlen),          //   input,    width = 8,                 .arlen
		.arsize                 (vexriscvaxi4_0_ibusaxi_translator_m0_arsize),         //   input,    width = 3,                 .arsize
		.arburst                (vexriscvaxi4_0_ibusaxi_translator_m0_arburst),        //   input,    width = 2,                 .arburst
		.arlock                 (vexriscvaxi4_0_ibusaxi_translator_m0_arlock),         //   input,    width = 1,                 .arlock
		.arcache                (vexriscvaxi4_0_ibusaxi_translator_m0_arcache),        //   input,    width = 4,                 .arcache
		.arprot                 (vexriscvaxi4_0_ibusaxi_translator_m0_arprot),         //   input,    width = 3,                 .arprot
		.aruser                 (vexriscvaxi4_0_ibusaxi_translator_m0_aruser),         //   input,    width = 1,                 .aruser
		.arqos                  (vexriscvaxi4_0_ibusaxi_translator_m0_arqos),          //   input,    width = 4,                 .arqos
		.arregion               (vexriscvaxi4_0_ibusaxi_translator_m0_arregion),       //   input,    width = 4,                 .arregion
		.arvalid                (vexriscvaxi4_0_ibusaxi_translator_m0_arvalid),        //   input,    width = 1,                 .arvalid
		.arready                (vexriscvaxi4_0_ibusaxi_translator_m0_arready),        //  output,    width = 1,                 .arready
		.rid                    (vexriscvaxi4_0_ibusaxi_translator_m0_rid),            //  output,    width = 1,                 .rid
		.rdata                  (vexriscvaxi4_0_ibusaxi_translator_m0_rdata),          //  output,   width = 32,                 .rdata
		.rresp                  (vexriscvaxi4_0_ibusaxi_translator_m0_rresp),          //  output,    width = 2,                 .rresp
		.rlast                  (vexriscvaxi4_0_ibusaxi_translator_m0_rlast),          //  output,    width = 1,                 .rlast
		.rvalid                 (vexriscvaxi4_0_ibusaxi_translator_m0_rvalid),         //  output,    width = 1,                 .rvalid
		.rready                 (vexriscvaxi4_0_ibusaxi_translator_m0_rready),         //   input,    width = 1,                 .rready
		.ruser                  (vexriscvaxi4_0_ibusaxi_translator_m0_ruser),          //  output,    width = 1,                 .ruser
		.wid                    (1'b0)                                                 // (terminated),                                
	);

	bram_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) onchip_memory_s1_agent (
		.clk                     (clock_in_out_clk_clk),                                 //   input,    width = 1,             clk.clk
		.reset                   (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset),     //   input,    width = 1,       clk_reset.reset
		.m0_address              (onchip_memory_s1_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (onchip_memory_s1_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (onchip_memory_s1_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (onchip_memory_s1_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (onchip_memory_s1_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (onchip_memory_s1_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (onchip_memory_s1_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (onchip_memory_s1_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (onchip_memory_s1_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (onchip_memory_s1_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (onchip_memory_s1_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (onchip_memory_s1_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (onchip_memory_s1_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (onchip_memory_s1_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (onchip_memory_s1_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (onchip_memory_s1_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (onchip_memory_s1_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (onchip_memory_s1_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (onchip_memory_s1_burst_adapter_source0_channel),       //   input,    width = 4,                .channel
		.rf_sink_ready           (onchip_memory_s1_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (onchip_memory_s1_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (onchip_memory_s1_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (onchip_memory_s1_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (onchip_memory_s1_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (onchip_memory_s1_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (onchip_memory_s1_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (onchip_memory_s1_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (onchip_memory_s1_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (onchip_memory_s1_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory_s1_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (onchip_memory_s1_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (onchip_memory_s1_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory_s1_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (onchip_memory_s1_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                 // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                  // (terminated),                               
	);

	bram_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) onchip_memory_s1_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset             (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (onchip_memory_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (onchip_memory_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (onchip_memory_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (onchip_memory_s1_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (onchip_memory_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (onchip_memory_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                             // (terminated),                         
		.csr_read          (1'b0),                                              // (terminated),                         
		.csr_write         (1'b0),                                              // (terminated),                         
		.csr_readdata      (),                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated),                         
		.almost_full_data  (),                                                  // (terminated),                         
		.almost_empty_data (),                                                  // (terminated),                         
		.in_empty          (1'b0),                                              // (terminated),                         
		.out_empty         (),                                                  // (terminated),                         
		.in_error          (1'b0),                                              // (terminated),                         
		.out_error         (),                                                  // (terminated),                         
		.in_channel        (1'b0),                                              // (terminated),                         
		.out_channel       ()                                                   // (terminated),                         
	);

	bram_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) onchip_memory_s1_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                             //   input,   width = 1,       clk.clk
		.reset             (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rdata_fifo_src_data),       //   input,  width = 34,        in.data
		.in_valid          (onchip_memory_s1_agent_rdata_fifo_src_valid),      //   input,   width = 1,          .valid
		.in_ready          (onchip_memory_s1_agent_rdata_fifo_src_ready),      //  output,   width = 1,          .ready
		.out_data          (onchip_memory_s1_agent_rdata_fifo_out_data),       //  output,  width = 34,       out.data
		.out_valid         (onchip_memory_s1_agent_rdata_fifo_out_valid),      //  output,   width = 1,          .valid
		.out_ready         (onchip_memory_s1_agent_rdata_fifo_out_ready),      //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                            // (terminated),                        
		.csr_read          (1'b0),                                             // (terminated),                        
		.csr_write         (1'b0),                                             // (terminated),                        
		.csr_readdata      (),                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated),                        
		.almost_full_data  (),                                                 // (terminated),                        
		.almost_empty_data (),                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                             // (terminated),                        
		.out_startofpacket (),                                                 // (terminated),                        
		.out_endofpacket   (),                                                 // (terminated),                        
		.in_empty          (1'b0),                                             // (terminated),                        
		.out_empty         (),                                                 // (terminated),                        
		.in_error          (1'b0),                                             // (terminated),                        
		.out_error         (),                                                 // (terminated),                        
		.in_channel        (1'b0),                                             // (terminated),                        
		.out_channel       ()                                                  // (terminated),                        
	);

	bram_altera_merlin_router_191_4mwvivy router (
		.sink_ready         (vexriscvaxi4_0_dbusaxi_agent_write_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (vexriscvaxi4_0_dbusaxi_agent_write_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (vexriscvaxi4_0_dbusaxi_agent_write_cp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (vexriscvaxi4_0_dbusaxi_agent_write_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (vexriscvaxi4_0_dbusaxi_agent_write_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                     //  output,  width = 128,          .data
		.src_channel        (router_src_channel),                                  //  output,    width = 4,          .channel
		.src_startofpacket  (router_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_router_191_4mwvivy router_001 (
		.sink_ready         (vexriscvaxi4_0_dbusaxi_agent_read_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (vexriscvaxi4_0_dbusaxi_agent_read_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (vexriscvaxi4_0_dbusaxi_agent_read_cp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (vexriscvaxi4_0_dbusaxi_agent_read_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (vexriscvaxi4_0_dbusaxi_agent_read_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                               //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                //  output,  width = 128,          .data
		.src_channel        (router_001_src_channel),                             //  output,    width = 4,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_router_191_4mwvivy router_002 (
		.sink_ready         (vexriscvaxi4_0_ibusaxi_agent_write_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (vexriscvaxi4_0_ibusaxi_agent_write_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (vexriscvaxi4_0_ibusaxi_agent_write_cp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (vexriscvaxi4_0_ibusaxi_agent_write_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (vexriscvaxi4_0_ibusaxi_agent_write_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                 //  output,  width = 128,          .data
		.src_channel        (router_002_src_channel),                              //  output,    width = 4,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_router_191_4mwvivy router_003 (
		.sink_ready         (vexriscvaxi4_0_ibusaxi_agent_read_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (vexriscvaxi4_0_ibusaxi_agent_read_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (vexriscvaxi4_0_ibusaxi_agent_read_cp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (vexriscvaxi4_0_ibusaxi_agent_read_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (vexriscvaxi4_0_ibusaxi_agent_read_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                               //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                //  output,  width = 128,          .data
		.src_channel        (router_003_src_channel),                             //  output,    width = 4,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_router_191_nixttci router_004 (
		.sink_ready         (onchip_memory_s1_agent_rp_ready),                  //  output,    width = 1,      sink.ready
		.sink_valid         (onchip_memory_s1_agent_rp_valid),                  //   input,    width = 1,          .valid
		.sink_data          (onchip_memory_s1_agent_rp_data),                   //   input,  width = 128,          .data
		.sink_startofpacket (onchip_memory_s1_agent_rp_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_agent_rp_endofpacket),            //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset              (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                             //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                              //  output,  width = 128,          .data
		.src_channel        (router_004_src_channel),                           //  output,    width = 4,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_burst_adapter_191_yuq35ea #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) onchip_memory_s1_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                 //   input,    width = 1,       cr0.clk
		.reset                 (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_src_channel),                                  //   input,    width = 4,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                    //  output,    width = 1,          .ready
		.source0_valid         (onchip_memory_s1_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (onchip_memory_s1_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (onchip_memory_s1_burst_adapter_source0_channel),       //  output,    width = 4,          .channel
		.source0_startofpacket (onchip_memory_s1_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (onchip_memory_s1_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (onchip_memory_s1_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	bram_altera_merlin_demultiplexer_191_a6gyv5y cmd_demux (
		.clk                (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset              (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                 //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                               //   input,    width = 4,          .channel
		.sink_data          (router_src_data),                                  //   input,  width = 128,          .data
		.sink_startofpacket (router_src_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                 //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                             //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                             //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                              //  output,  width = 128,          .data
		.src0_channel       (cmd_demux_src0_channel),                           //  output,    width = 4,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_demultiplexer_191_a6gyv5y cmd_demux_001 (
		.clk                (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset              (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                           //   input,    width = 4,          .channel
		.sink_data          (router_001_src_data),                              //   input,  width = 128,          .data
		.sink_startofpacket (router_001_src_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                             //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                         //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                         //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                          //  output,  width = 128,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                       //  output,    width = 4,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_demultiplexer_191_a6gyv5y cmd_demux_002 (
		.clk                (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset              (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                           //   input,    width = 4,          .channel
		.sink_data          (router_002_src_data),                              //   input,  width = 128,          .data
		.sink_startofpacket (router_002_src_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                             //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                         //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                         //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_002_src0_data),                          //  output,  width = 128,          .data
		.src0_channel       (cmd_demux_002_src0_channel),                       //  output,    width = 4,          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_demultiplexer_191_a6gyv5y cmd_demux_003 (
		.clk                (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset              (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                           //   input,    width = 4,          .channel
		.sink_data          (router_003_src_data),                              //   input,  width = 128,          .data
		.sink_startofpacket (router_003_src_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                             //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                         //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                         //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_003_src0_data),                          //  output,  width = 128,          .data
		.src0_channel       (cmd_demux_003_src0_channel),                       //  output,    width = 4,          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_multiplexer_191_ausrmcy cmd_mux (
		.clk                 (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset               (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                 //  output,  width = 128,          .data
		.src_channel         (cmd_mux_src_channel),                              //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                             //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                           //   input,    width = 4,          .channel
		.sink0_data          (cmd_demux_src0_data),                              //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                       //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                         //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                         //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                       //   input,    width = 4,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                          //   input,  width = 128,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                         //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                         //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                       //   input,    width = 4,          .channel
		.sink2_data          (cmd_demux_002_src0_data),                          //   input,  width = 128,          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                         //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                         //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                       //   input,    width = 4,          .channel
		.sink3_data          (cmd_demux_003_src0_data),                          //   input,  width = 128,          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	bram_altera_merlin_demultiplexer_191_rg624ni rsp_demux (
		.clk                (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset              (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                           //   input,    width = 4,          .channel
		.sink_data          (router_004_src_data),                              //   input,  width = 128,          .data
		.sink_startofpacket (router_004_src_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                             //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                             //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                             //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                              //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_src0_channel),                           //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                       //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                             //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                             //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                              //  output,  width = 128,          .data
		.src1_channel       (rsp_demux_src1_channel),                           //  output,    width = 4,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                       //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                             //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                             //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_src2_data),                              //  output,  width = 128,          .data
		.src2_channel       (rsp_demux_src2_channel),                           //  output,    width = 4,          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                       //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                             //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                             //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_src3_data),                              //  output,  width = 128,          .data
		.src3_channel       (rsp_demux_src3_channel),                           //  output,    width = 4,          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_multiplexer_191_hsnrryi rsp_mux (
		.clk                 (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset               (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                 //  output,  width = 128,          .data
		.src_channel         (rsp_mux_src_channel),                              //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                             //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                           //   input,    width = 4,          .channel
		.sink0_data          (rsp_demux_src0_data),                              //   input,  width = 128,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                        //   input,    width = 1,          .endofpacket
	);

	bram_altera_merlin_multiplexer_191_hsnrryi rsp_mux_001 (
		.clk                 (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset               (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                            //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                             //  output,  width = 128,          .data
		.src_channel         (rsp_mux_001_src_channel),                          //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                             //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                           //   input,    width = 4,          .channel
		.sink0_data          (rsp_demux_src1_data),                              //   input,  width = 128,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                        //   input,    width = 1,          .endofpacket
	);

	bram_altera_merlin_multiplexer_191_hsnrryi rsp_mux_002 (
		.clk                 (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset               (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_002_src_valid),                            //  output,    width = 1,          .valid
		.src_data            (rsp_mux_002_src_data),                             //  output,  width = 128,          .data
		.src_channel         (rsp_mux_002_src_channel),                          //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                             //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src2_channel),                           //   input,    width = 4,          .channel
		.sink0_data          (rsp_demux_src2_data),                              //   input,  width = 128,          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket)                        //   input,    width = 1,          .endofpacket
	);

	bram_altera_merlin_multiplexer_191_hsnrryi rsp_mux_003 (
		.clk                 (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset               (VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_003_src_valid),                            //  output,    width = 1,          .valid
		.src_data            (rsp_mux_003_src_data),                             //  output,  width = 128,          .data
		.src_channel         (rsp_mux_003_src_channel),                          //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src3_ready),                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src3_valid),                             //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src3_channel),                           //   input,    width = 4,          .channel
		.sink0_data          (rsp_demux_src3_data),                              //   input,  width = 128,          .data
		.sink0_startofpacket (rsp_demux_src3_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src3_endofpacket)                        //   input,    width = 1,          .endofpacket
	);

endmodule
