// bram_altera_mm_interconnect_191_qpdv3hq.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module bram_altera_mm_interconnect_191_qpdv3hq (
		input  wire [31:0] master_0_master_address,                          //                            master_0_master.address
		output wire        master_0_master_waitrequest,                      //                                           .waitrequest
		input  wire [3:0]  master_0_master_byteenable,                       //                                           .byteenable
		input  wire        master_0_master_read,                             //                                           .read
		output wire [31:0] master_0_master_readdata,                         //                                           .readdata
		output wire        master_0_master_readdatavalid,                    //                                           .readdatavalid
		input  wire        master_0_master_write,                            //                                           .write
		input  wire [31:0] master_0_master_writedata,                        //                                           .writedata
		output wire [8:0]  onchip_memory_s1_address,                         //                           onchip_memory_s1.address
		output wire        onchip_memory_s1_write,                           //                                           .write
		input  wire [63:0] onchip_memory_s1_readdata,                        //                                           .readdata
		output wire [63:0] onchip_memory_s1_writedata,                       //                                           .writedata
		output wire [7:0]  onchip_memory_s1_byteenable,                      //                                           .byteenable
		output wire        onchip_memory_s1_chipselect,                      //                                           .chipselect
		output wire        onchip_memory_s1_clken,                           //                                           .clken
		input  wire        onchip_memory_reset1_reset_bridge_in_reset_reset, // onchip_memory_reset1_reset_bridge_in_reset.reset
		input  wire        clock_in_out_clk_clk                              //                           clock_in_out_clk.clk
	);

	wire          master_0_master_translator_avalon_universal_master_0_waitrequest;   // master_0_master_agent:av_waitrequest -> master_0_master_translator:uav_waitrequest
	wire   [31:0] master_0_master_translator_avalon_universal_master_0_readdata;      // master_0_master_agent:av_readdata -> master_0_master_translator:uav_readdata
	wire          master_0_master_translator_avalon_universal_master_0_debugaccess;   // master_0_master_translator:uav_debugaccess -> master_0_master_agent:av_debugaccess
	wire   [31:0] master_0_master_translator_avalon_universal_master_0_address;       // master_0_master_translator:uav_address -> master_0_master_agent:av_address
	wire          master_0_master_translator_avalon_universal_master_0_read;          // master_0_master_translator:uav_read -> master_0_master_agent:av_read
	wire    [3:0] master_0_master_translator_avalon_universal_master_0_byteenable;    // master_0_master_translator:uav_byteenable -> master_0_master_agent:av_byteenable
	wire          master_0_master_translator_avalon_universal_master_0_readdatavalid; // master_0_master_agent:av_readdatavalid -> master_0_master_translator:uav_readdatavalid
	wire          master_0_master_translator_avalon_universal_master_0_lock;          // master_0_master_translator:uav_lock -> master_0_master_agent:av_lock
	wire          master_0_master_translator_avalon_universal_master_0_write;         // master_0_master_translator:uav_write -> master_0_master_agent:av_write
	wire   [31:0] master_0_master_translator_avalon_universal_master_0_writedata;     // master_0_master_translator:uav_writedata -> master_0_master_agent:av_writedata
	wire    [2:0] master_0_master_translator_avalon_universal_master_0_burstcount;    // master_0_master_translator:uav_burstcount -> master_0_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> master_0_master_agent:rp_valid
	wire  [111:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> master_0_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                  // master_0_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> master_0_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> master_0_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> master_0_master_agent:rp_endofpacket
	wire   [63:0] onchip_memory_s1_agent_m0_readdata;                                 // onchip_memory_s1_translator:uav_readdata -> onchip_memory_s1_agent:m0_readdata
	wire          onchip_memory_s1_agent_m0_waitrequest;                              // onchip_memory_s1_translator:uav_waitrequest -> onchip_memory_s1_agent:m0_waitrequest
	wire          onchip_memory_s1_agent_m0_debugaccess;                              // onchip_memory_s1_agent:m0_debugaccess -> onchip_memory_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory_s1_agent_m0_address;                                  // onchip_memory_s1_agent:m0_address -> onchip_memory_s1_translator:uav_address
	wire    [7:0] onchip_memory_s1_agent_m0_byteenable;                               // onchip_memory_s1_agent:m0_byteenable -> onchip_memory_s1_translator:uav_byteenable
	wire          onchip_memory_s1_agent_m0_read;                                     // onchip_memory_s1_agent:m0_read -> onchip_memory_s1_translator:uav_read
	wire          onchip_memory_s1_agent_m0_readdatavalid;                            // onchip_memory_s1_translator:uav_readdatavalid -> onchip_memory_s1_agent:m0_readdatavalid
	wire          onchip_memory_s1_agent_m0_lock;                                     // onchip_memory_s1_agent:m0_lock -> onchip_memory_s1_translator:uav_lock
	wire   [63:0] onchip_memory_s1_agent_m0_writedata;                                // onchip_memory_s1_agent:m0_writedata -> onchip_memory_s1_translator:uav_writedata
	wire          onchip_memory_s1_agent_m0_write;                                    // onchip_memory_s1_agent:m0_write -> onchip_memory_s1_translator:uav_write
	wire    [3:0] onchip_memory_s1_agent_m0_burstcount;                               // onchip_memory_s1_agent:m0_burstcount -> onchip_memory_s1_translator:uav_burstcount
	wire          onchip_memory_s1_agent_rf_source_valid;                             // onchip_memory_s1_agent:rf_source_valid -> onchip_memory_s1_agent_rsp_fifo:in_valid
	wire  [148:0] onchip_memory_s1_agent_rf_source_data;                              // onchip_memory_s1_agent:rf_source_data -> onchip_memory_s1_agent_rsp_fifo:in_data
	wire          onchip_memory_s1_agent_rf_source_ready;                             // onchip_memory_s1_agent_rsp_fifo:in_ready -> onchip_memory_s1_agent:rf_source_ready
	wire          onchip_memory_s1_agent_rf_source_startofpacket;                     // onchip_memory_s1_agent:rf_source_startofpacket -> onchip_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory_s1_agent_rf_source_endofpacket;                       // onchip_memory_s1_agent:rf_source_endofpacket -> onchip_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_valid;                          // onchip_memory_s1_agent_rsp_fifo:out_valid -> onchip_memory_s1_agent:rf_sink_valid
	wire  [148:0] onchip_memory_s1_agent_rsp_fifo_out_data;                           // onchip_memory_s1_agent_rsp_fifo:out_data -> onchip_memory_s1_agent:rf_sink_data
	wire          onchip_memory_s1_agent_rsp_fifo_out_ready;                          // onchip_memory_s1_agent:rf_sink_ready -> onchip_memory_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                  // onchip_memory_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory_s1_agent:rf_sink_startofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                    // onchip_memory_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory_s1_agent:rf_sink_endofpacket
	wire          onchip_memory_s1_agent_rdata_fifo_src_valid;                        // onchip_memory_s1_agent:rdata_fifo_src_valid -> onchip_memory_s1_agent:rdata_fifo_sink_valid
	wire   [65:0] onchip_memory_s1_agent_rdata_fifo_src_data;                         // onchip_memory_s1_agent:rdata_fifo_src_data -> onchip_memory_s1_agent:rdata_fifo_sink_data
	wire          onchip_memory_s1_agent_rdata_fifo_src_ready;                        // onchip_memory_s1_agent:rdata_fifo_sink_ready -> onchip_memory_s1_agent:rdata_fifo_src_ready
	wire          master_0_master_agent_cp_valid;                                     // master_0_master_agent:cp_valid -> router:sink_valid
	wire  [111:0] master_0_master_agent_cp_data;                                      // master_0_master_agent:cp_data -> router:sink_data
	wire          master_0_master_agent_cp_ready;                                     // router:sink_ready -> master_0_master_agent:cp_ready
	wire          master_0_master_agent_cp_startofpacket;                             // master_0_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          master_0_master_agent_cp_endofpacket;                               // master_0_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [111:0] router_src_data;                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                   // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          onchip_memory_s1_agent_rp_valid;                                    // onchip_memory_s1_agent:rp_valid -> router_001:sink_valid
	wire  [147:0] onchip_memory_s1_agent_rp_data;                                     // onchip_memory_s1_agent:rp_data -> router_001:sink_data
	wire          onchip_memory_s1_agent_rp_ready;                                    // router_001:sink_ready -> onchip_memory_s1_agent:rp_ready
	wire          onchip_memory_s1_agent_rp_startofpacket;                            // onchip_memory_s1_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          onchip_memory_s1_agent_rp_endofpacket;                              // onchip_memory_s1_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [111:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [111:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> onchip_memory_s1_cmd_width_adapter:in_valid
	wire  [111:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> onchip_memory_s1_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                  // onchip_memory_s1_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> onchip_memory_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> onchip_memory_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> onchip_memory_s1_cmd_width_adapter:in_endofpacket
	wire          onchip_memory_s1_cmd_width_adapter_src_valid;                       // onchip_memory_s1_cmd_width_adapter:out_valid -> onchip_memory_s1_agent:cp_valid
	wire  [147:0] onchip_memory_s1_cmd_width_adapter_src_data;                        // onchip_memory_s1_cmd_width_adapter:out_data -> onchip_memory_s1_agent:cp_data
	wire          onchip_memory_s1_cmd_width_adapter_src_ready;                       // onchip_memory_s1_agent:cp_ready -> onchip_memory_s1_cmd_width_adapter:out_ready
	wire    [0:0] onchip_memory_s1_cmd_width_adapter_src_channel;                     // onchip_memory_s1_cmd_width_adapter:out_channel -> onchip_memory_s1_agent:cp_channel
	wire          onchip_memory_s1_cmd_width_adapter_src_startofpacket;               // onchip_memory_s1_cmd_width_adapter:out_startofpacket -> onchip_memory_s1_agent:cp_startofpacket
	wire          onchip_memory_s1_cmd_width_adapter_src_endofpacket;                 // onchip_memory_s1_cmd_width_adapter:out_endofpacket -> onchip_memory_s1_agent:cp_endofpacket
	wire          router_001_src_valid;                                               // router_001:src_valid -> onchip_memory_s1_rsp_width_adapter:in_valid
	wire  [147:0] router_001_src_data;                                                // router_001:src_data -> onchip_memory_s1_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                               // onchip_memory_s1_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                             // router_001:src_channel -> onchip_memory_s1_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                       // router_001:src_startofpacket -> onchip_memory_s1_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                         // router_001:src_endofpacket -> onchip_memory_s1_rsp_width_adapter:in_endofpacket
	wire          onchip_memory_s1_rsp_width_adapter_src_valid;                       // onchip_memory_s1_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [111:0] onchip_memory_s1_rsp_width_adapter_src_data;                        // onchip_memory_s1_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          onchip_memory_s1_rsp_width_adapter_src_ready;                       // rsp_demux:sink_ready -> onchip_memory_s1_rsp_width_adapter:out_ready
	wire    [0:0] onchip_memory_s1_rsp_width_adapter_src_channel;                     // onchip_memory_s1_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          onchip_memory_s1_rsp_width_adapter_src_startofpacket;               // onchip_memory_s1_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          onchip_memory_s1_rsp_width_adapter_src_endofpacket;                 // onchip_memory_s1_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket

	bram_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) master_0_master_translator (
		.clk                    (clock_in_out_clk_clk),                                               //   input,   width = 1,                       clk.clk
		.reset                  (onchip_memory_reset1_reset_bridge_in_reset_reset),                   //   input,   width = 1,                     reset.reset
		.uav_address            (master_0_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (master_0_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (master_0_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (master_0_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (master_0_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (master_0_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (master_0_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (master_0_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (master_0_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (master_0_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (master_0_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (master_0_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (master_0_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (master_0_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (master_0_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (master_0_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (master_0_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (master_0_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (master_0_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                               // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                               // (terminated),                                        
		.av_begintransfer       (1'b0),                                                               // (terminated),                                        
		.av_chipselect          (1'b0),                                                               // (terminated),                                        
		.av_lock                (1'b0),                                                               // (terminated),                                        
		.av_debugaccess         (1'b0),                                                               // (terminated),                                        
		.uav_clken              (),                                                                   // (terminated),                                        
		.av_clken               (1'b1),                                                               // (terminated),                                        
		.uav_response           (2'b00),                                                              // (terminated),                                        
		.av_response            (),                                                                   // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                               // (terminated),                                        
		.av_writeresponsevalid  ()                                                                    // (terminated),                                        
	);

	bram_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) onchip_memory_s1_translator (
		.clk                    (clock_in_out_clk_clk),                             //   input,   width = 1,                      clk.clk
		.reset                  (onchip_memory_reset1_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (onchip_memory_s1_agent_m0_address),                //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory_s1_agent_m0_burstcount),             //   input,   width = 4,                         .burstcount
		.uav_read               (onchip_memory_s1_agent_m0_read),                   //   input,   width = 1,                         .read
		.uav_write              (onchip_memory_s1_agent_m0_write),                  //   input,   width = 1,                         .write
		.uav_waitrequest        (onchip_memory_s1_agent_m0_waitrequest),            //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (onchip_memory_s1_agent_m0_readdatavalid),          //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (onchip_memory_s1_agent_m0_byteenable),             //   input,   width = 8,                         .byteenable
		.uav_readdata           (onchip_memory_s1_agent_m0_readdata),               //  output,  width = 64,                         .readdata
		.uav_writedata          (onchip_memory_s1_agent_m0_writedata),              //   input,  width = 64,                         .writedata
		.uav_lock               (onchip_memory_s1_agent_m0_lock),                   //   input,   width = 1,                         .lock
		.uav_debugaccess        (onchip_memory_s1_agent_m0_debugaccess),            //   input,   width = 1,                         .debugaccess
		.av_address             (onchip_memory_s1_address),                         //  output,   width = 9,      avalon_anti_slave_0.address
		.av_write               (onchip_memory_s1_write),                           //  output,   width = 1,                         .write
		.av_readdata            (onchip_memory_s1_readdata),                        //   input,  width = 64,                         .readdata
		.av_writedata           (onchip_memory_s1_writedata),                       //  output,  width = 64,                         .writedata
		.av_byteenable          (onchip_memory_s1_byteenable),                      //  output,   width = 8,                         .byteenable
		.av_chipselect          (onchip_memory_s1_chipselect),                      //  output,   width = 1,                         .chipselect
		.av_clken               (onchip_memory_s1_clken),                           //  output,   width = 1,                         .clken
		.av_read                (),                                                 // (terminated),                                       
		.av_begintransfer       (),                                                 // (terminated),                                       
		.av_beginbursttransfer  (),                                                 // (terminated),                                       
		.av_burstcount          (),                                                 // (terminated),                                       
		.av_readdatavalid       (1'b0),                                             // (terminated),                                       
		.av_waitrequest         (1'b0),                                             // (terminated),                                       
		.av_writebyteenable     (),                                                 // (terminated),                                       
		.av_lock                (),                                                 // (terminated),                                       
		.uav_clken              (1'b0),                                             // (terminated),                                       
		.av_debugaccess         (),                                                 // (terminated),                                       
		.av_outputenable        (),                                                 // (terminated),                                       
		.uav_response           (),                                                 // (terminated),                                       
		.av_response            (2'b00),                                            // (terminated),                                       
		.uav_writeresponsevalid (),                                                 // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                              // (terminated),                                       
	);

	bram_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (111),
		.PKT_DOMAIN_H              (110),
		.PKT_DOMAIN_L              (109),
		.PKT_SNOOP_H               (108),
		.PKT_SNOOP_L               (105),
		.PKT_BARRIER_H             (104),
		.PKT_BARRIER_L             (103),
		.PKT_ORI_BURST_SIZE_H      (102),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_QOS_H                 (87),
		.PKT_QOS_L                 (87),
		.PKT_DATA_SIDEBAND_H       (85),
		.PKT_DATA_SIDEBAND_L       (85),
		.PKT_ADDR_SIDEBAND_H       (84),
		.PKT_ADDR_SIDEBAND_L       (84),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_CACHE_H               (97),
		.PKT_CACHE_L               (94),
		.PKT_THREAD_ID_H           (90),
		.PKT_THREAD_ID_L           (90),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (89),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) master_0_master_agent (
		.clk                   (clock_in_out_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (onchip_memory_reset1_reset_bridge_in_reset_reset),                   //   input,    width = 1, clk_reset.reset
		.av_address            (master_0_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (master_0_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (master_0_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (master_0_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (master_0_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (master_0_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (master_0_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (master_0_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (master_0_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (master_0_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (master_0_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (master_0_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (master_0_master_agent_cp_data),                                      //  output,  width = 112,          .data
		.cp_startofpacket      (master_0_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (master_0_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (master_0_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                  //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                   //   input,  width = 112,          .data
		.rp_channel            (rsp_mux_src_channel),                                                //   input,    width = 1,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                          //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                            //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                  //  output,    width = 1,          .ready
		.av_response           (),                                                                   // (terminated),                         
		.av_writeresponsevalid ()                                                                    // (terminated),                         
	);

	bram_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (138),
		.PKT_ORI_BURST_SIZE_L      (136),
		.PKT_RESPONSE_STATUS_H     (135),
		.PKT_RESPONSE_STATUS_L     (134),
		.PKT_BURST_SIZE_H          (117),
		.PKT_BURST_SIZE_L          (115),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (122),
		.PKT_PROTECTION_H          (129),
		.PKT_PROTECTION_L          (127),
		.PKT_BURSTWRAP_H           (114),
		.PKT_BURSTWRAP_L           (114),
		.PKT_BYTE_CNT_H            (113),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (124),
		.PKT_SRC_ID_L              (124),
		.PKT_DEST_ID_H             (125),
		.PKT_DEST_ID_L             (125),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (148),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) onchip_memory_s1_agent (
		.clk                     (clock_in_out_clk_clk),                                 //   input,    width = 1,             clk.clk
		.reset                   (onchip_memory_reset1_reset_bridge_in_reset_reset),     //   input,    width = 1,       clk_reset.reset
		.m0_address              (onchip_memory_s1_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (onchip_memory_s1_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (onchip_memory_s1_agent_m0_byteenable),                 //  output,    width = 8,                .byteenable
		.m0_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (onchip_memory_s1_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (onchip_memory_s1_agent_m0_readdata),                   //   input,   width = 64,                .readdata
		.m0_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (onchip_memory_s1_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (onchip_memory_s1_agent_m0_writedata),                  //  output,   width = 64,                .writedata
		.m0_write                (onchip_memory_s1_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (onchip_memory_s1_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (onchip_memory_s1_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (onchip_memory_s1_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (onchip_memory_s1_agent_rp_data),                       //  output,  width = 148,                .data
		.rp_startofpacket        (onchip_memory_s1_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (onchip_memory_s1_cmd_width_adapter_src_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (onchip_memory_s1_cmd_width_adapter_src_valid),         //   input,    width = 1,                .valid
		.cp_data                 (onchip_memory_s1_cmd_width_adapter_src_data),          //   input,  width = 148,                .data
		.cp_startofpacket        (onchip_memory_s1_cmd_width_adapter_src_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (onchip_memory_s1_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (onchip_memory_s1_cmd_width_adapter_src_channel),       //   input,    width = 1,                .channel
		.rf_sink_ready           (onchip_memory_s1_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (onchip_memory_s1_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (onchip_memory_s1_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (onchip_memory_s1_agent_rsp_fifo_out_data),             //   input,  width = 149,                .data
		.rf_source_ready         (onchip_memory_s1_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (onchip_memory_s1_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (onchip_memory_s1_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (onchip_memory_s1_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (onchip_memory_s1_agent_rf_source_data),                //  output,  width = 149,                .data
		.rdata_fifo_sink_ready   (onchip_memory_s1_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory_s1_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (onchip_memory_s1_agent_rdata_fifo_src_data),           //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (onchip_memory_s1_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory_s1_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (onchip_memory_s1_agent_rdata_fifo_src_data),           //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                 // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                  // (terminated),                               
	);

	bram_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (149),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) onchip_memory_s1_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset             (onchip_memory_reset1_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rf_source_data),             //   input,  width = 149,        in.data
		.in_valid          (onchip_memory_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (onchip_memory_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (onchip_memory_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (onchip_memory_s1_agent_rsp_fifo_out_data),          //  output,  width = 149,       out.data
		.out_valid         (onchip_memory_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (onchip_memory_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                             // (terminated),                         
		.csr_read          (1'b0),                                              // (terminated),                         
		.csr_write         (1'b0),                                              // (terminated),                         
		.csr_readdata      (),                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated),                         
		.almost_full_data  (),                                                  // (terminated),                         
		.almost_empty_data (),                                                  // (terminated),                         
		.in_empty          (1'b0),                                              // (terminated),                         
		.out_empty         (),                                                  // (terminated),                         
		.in_error          (1'b0),                                              // (terminated),                         
		.out_error         (),                                                  // (terminated),                         
		.in_channel        (1'b0),                                              // (terminated),                         
		.out_channel       ()                                                   // (terminated),                         
	);

	bram_altera_merlin_router_191_ek5da2y router (
		.sink_ready         (master_0_master_agent_cp_ready),                   //  output,    width = 1,      sink.ready
		.sink_valid         (master_0_master_agent_cp_valid),                   //   input,    width = 1,          .valid
		.sink_data          (master_0_master_agent_cp_data),                    //   input,  width = 112,          .data
		.sink_startofpacket (master_0_master_agent_cp_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (master_0_master_agent_cp_endofpacket),             //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset              (onchip_memory_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                 //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                  //  output,  width = 112,          .data
		.src_channel        (router_src_channel),                               //  output,    width = 1,          .channel
		.src_startofpacket  (router_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_router_191_wvblgwq router_001 (
		.sink_ready         (onchip_memory_s1_agent_rp_ready),                  //  output,    width = 1,      sink.ready
		.sink_valid         (onchip_memory_s1_agent_rp_valid),                  //   input,    width = 1,          .valid
		.sink_data          (onchip_memory_s1_agent_rp_data),                   //   input,  width = 148,          .data
		.sink_startofpacket (onchip_memory_s1_agent_rp_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_agent_rp_endofpacket),            //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset              (onchip_memory_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                             //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                              //  output,  width = 148,          .data
		.src_channel        (router_001_src_channel),                           //  output,    width = 1,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_demultiplexer_191_otyljdi cmd_demux (
		.clk                (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset              (onchip_memory_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                 //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                               //   input,    width = 1,          .channel
		.sink_data          (router_src_data),                                  //   input,  width = 112,          .data
		.sink_startofpacket (router_src_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                 //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                             //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                             //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                              //  output,  width = 112,          .data
		.src0_channel       (cmd_demux_src0_channel),                           //  output,    width = 1,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_multiplexer_191_clji4ia cmd_mux (
		.clk                 (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset               (onchip_memory_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                 //  output,  width = 112,          .data
		.src_channel         (cmd_mux_src_channel),                              //  output,    width = 1,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                             //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                           //   input,    width = 1,          .channel
		.sink0_data          (cmd_demux_src0_data),                              //   input,  width = 112,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                        //   input,    width = 1,          .endofpacket
	);

	bram_altera_merlin_demultiplexer_191_otyljdi rsp_demux (
		.clk                (clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset              (onchip_memory_reset1_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.sink_ready         (onchip_memory_s1_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (onchip_memory_s1_rsp_width_adapter_src_channel),       //   input,    width = 1,          .channel
		.sink_data          (onchip_memory_s1_rsp_width_adapter_src_data),          //   input,  width = 112,          .data
		.sink_startofpacket (onchip_memory_s1_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (onchip_memory_s1_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                  //  output,  width = 112,          .data
		.src0_channel       (rsp_demux_src0_channel),                               //  output,    width = 1,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	bram_altera_merlin_multiplexer_191_wzqyoca rsp_mux (
		.clk                 (clock_in_out_clk_clk),                             //   input,    width = 1,       clk.clk
		.reset               (onchip_memory_reset1_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                 //  output,  width = 112,          .data
		.src_channel         (rsp_mux_src_channel),                              //  output,    width = 1,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                             //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                           //   input,    width = 1,          .channel
		.sink0_data          (rsp_demux_src0_data),                              //   input,  width = 112,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                        //   input,    width = 1,          .endofpacket
	);

	bram_altera_merlin_width_adapter_191_o6hoisy #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (99),
		.IN_PKT_RESPONSE_STATUS_L      (98),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (100),
		.IN_PKT_ORI_BURST_SIZE_H       (102),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (135),
		.OUT_PKT_RESPONSE_STATUS_L     (134),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (136),
		.OUT_PKT_ORI_BURST_SIZE_H      (138),
		.OUT_ST_DATA_W                 (148),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) onchip_memory_s1_cmd_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset                (onchip_memory_reset1_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                    //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                  //   input,    width = 1,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                    //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                     //   input,  width = 112,          .data
		.out_endofpacket      (onchip_memory_s1_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_memory_s1_cmd_width_adapter_src_data),          //  output,  width = 148,          .data
		.out_channel          (onchip_memory_s1_cmd_width_adapter_src_channel),       //  output,    width = 1,          .channel
		.out_valid            (onchip_memory_s1_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (onchip_memory_s1_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_memory_s1_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated),                         
	);

	bram_altera_merlin_width_adapter_191_w5fpv6a #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (135),
		.IN_PKT_RESPONSE_STATUS_L      (134),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (136),
		.IN_PKT_ORI_BURST_SIZE_H       (138),
		.IN_ST_DATA_W                  (148),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (99),
		.OUT_PKT_RESPONSE_STATUS_L     (98),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (100),
		.OUT_PKT_ORI_BURST_SIZE_H      (102),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) onchip_memory_s1_rsp_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset                (onchip_memory_reset1_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_valid             (router_001_src_valid),                                 //   input,    width = 1,      sink.valid
		.in_channel           (router_001_src_channel),                               //   input,    width = 1,          .channel
		.in_startofpacket     (router_001_src_startofpacket),                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                           //   input,    width = 1,          .endofpacket
		.in_ready             (router_001_src_ready),                                 //  output,    width = 1,          .ready
		.in_data              (router_001_src_data),                                  //   input,  width = 148,          .data
		.out_endofpacket      (onchip_memory_s1_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_memory_s1_rsp_width_adapter_src_data),          //  output,  width = 112,          .data
		.out_channel          (onchip_memory_s1_rsp_width_adapter_src_channel),       //  output,    width = 1,          .channel
		.out_valid            (onchip_memory_s1_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (onchip_memory_s1_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_memory_s1_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated),                         
	);

endmodule
