// bram.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module bram (
		input  wire        clk_clk,                  //           clk.clk
		input  wire [9:0]  onchip_memory_address,    // onchip_memory.address
		input  wire        onchip_memory_chipselect, //              .chipselect
		input  wire        onchip_memory_clken,      //              .clken
		input  wire        onchip_memory_write,      //              .write
		output wire [31:0] onchip_memory_readdata,   //              .readdata
		input  wire [31:0] onchip_memory_writedata,  //              .writedata
		input  wire [3:0]  onchip_memory_byteenable, //              .byteenable
		input  wire        reset_reset_n             //         reset.reset_n
	);

	wire         clock_in_out_clk_clk;                          // clock_in:out_clk -> [VexRiscvAxi4_0:clk, irq_mapper:clk, irq_mapper_001:clk, master_0:clk_clk, mm_interconnect_0:clock_in_out_clk_clk, onchip_memory:clk, reset_in:clk, rst_controller:clk, rst_controller_002:clk]
	wire   [1:0] vexriscvaxi4_0_dbusaxi_awburst;                // VexRiscvAxi4_0:dBusAxi_aw_payload_burst -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_awburst
	wire   [3:0] vexriscvaxi4_0_dbusaxi_arregion;               // VexRiscvAxi4_0:dBusAxi_ar_payload_region -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_arregion
	wire   [7:0] vexriscvaxi4_0_dbusaxi_arlen;                  // VexRiscvAxi4_0:dBusAxi_ar_payload_len -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_arlen
	wire   [3:0] vexriscvaxi4_0_dbusaxi_arqos;                  // VexRiscvAxi4_0:dBusAxi_ar_payload_qos -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_arqos
	wire         vexriscvaxi4_0_dbusaxi_wready;                 // mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_wready -> VexRiscvAxi4_0:dBusAxi_w_ready
	wire   [3:0] vexriscvaxi4_0_dbusaxi_wstrb;                  // VexRiscvAxi4_0:dBusAxi_w_payload_strb -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_wstrb
	wire         vexriscvaxi4_0_dbusaxi_rid;                    // mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_rid -> VexRiscvAxi4_0:dBusAxi_r_payload_id
	wire         vexriscvaxi4_0_dbusaxi_rready;                 // VexRiscvAxi4_0:dBusAxi_r_ready -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_rready
	wire   [7:0] vexriscvaxi4_0_dbusaxi_awlen;                  // VexRiscvAxi4_0:dBusAxi_aw_payload_len -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_awlen
	wire   [3:0] vexriscvaxi4_0_dbusaxi_awqos;                  // VexRiscvAxi4_0:dBusAxi_aw_payload_qos -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_awqos
	wire   [3:0] vexriscvaxi4_0_dbusaxi_arcache;                // VexRiscvAxi4_0:dBusAxi_ar_payload_cache -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_arcache
	wire         vexriscvaxi4_0_dbusaxi_wvalid;                 // VexRiscvAxi4_0:dBusAxi_w_valid -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_wvalid
	wire  [31:0] vexriscvaxi4_0_dbusaxi_araddr;                 // VexRiscvAxi4_0:dBusAxi_ar_payload_addr -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_araddr
	wire   [2:0] vexriscvaxi4_0_dbusaxi_arprot;                 // VexRiscvAxi4_0:dBusAxi_ar_payload_prot -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_arprot
	wire   [2:0] vexriscvaxi4_0_dbusaxi_awprot;                 // VexRiscvAxi4_0:dBusAxi_aw_payload_prot -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_awprot
	wire  [31:0] vexriscvaxi4_0_dbusaxi_wdata;                  // VexRiscvAxi4_0:dBusAxi_w_payload_data -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_wdata
	wire         vexriscvaxi4_0_dbusaxi_arvalid;                // VexRiscvAxi4_0:dBusAxi_ar_valid -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_arvalid
	wire   [3:0] vexriscvaxi4_0_dbusaxi_awcache;                // VexRiscvAxi4_0:dBusAxi_aw_payload_cache -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_awcache
	wire         vexriscvaxi4_0_dbusaxi_arid;                   // VexRiscvAxi4_0:dBusAxi_ar_payload_id -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_arid
	wire         vexriscvaxi4_0_dbusaxi_arlock;                 // VexRiscvAxi4_0:dBusAxi_ar_payload_lock -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_arlock
	wire         vexriscvaxi4_0_dbusaxi_awlock;                 // VexRiscvAxi4_0:dBusAxi_aw_payload_lock -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_awlock
	wire  [31:0] vexriscvaxi4_0_dbusaxi_awaddr;                 // VexRiscvAxi4_0:dBusAxi_aw_payload_addr -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_awaddr
	wire   [1:0] vexriscvaxi4_0_dbusaxi_bresp;                  // mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_bresp -> VexRiscvAxi4_0:dBusAxi_b_payload_resp
	wire         vexriscvaxi4_0_dbusaxi_arready;                // mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_arready -> VexRiscvAxi4_0:dBusAxi_ar_ready
	wire  [31:0] vexriscvaxi4_0_dbusaxi_rdata;                  // mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_rdata -> VexRiscvAxi4_0:dBusAxi_r_payload_data
	wire         vexriscvaxi4_0_dbusaxi_awready;                // mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_awready -> VexRiscvAxi4_0:dBusAxi_aw_ready
	wire   [1:0] vexriscvaxi4_0_dbusaxi_arburst;                // VexRiscvAxi4_0:dBusAxi_ar_payload_burst -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_arburst
	wire   [2:0] vexriscvaxi4_0_dbusaxi_arsize;                 // VexRiscvAxi4_0:dBusAxi_ar_payload_size -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_arsize
	wire         vexriscvaxi4_0_dbusaxi_bready;                 // VexRiscvAxi4_0:dBusAxi_b_ready -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_bready
	wire         vexriscvaxi4_0_dbusaxi_rlast;                  // mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_rlast -> VexRiscvAxi4_0:dBusAxi_r_payload_last
	wire         vexriscvaxi4_0_dbusaxi_wlast;                  // VexRiscvAxi4_0:dBusAxi_w_payload_last -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_wlast
	wire   [3:0] vexriscvaxi4_0_dbusaxi_awregion;               // VexRiscvAxi4_0:dBusAxi_aw_payload_region -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_awregion
	wire   [1:0] vexriscvaxi4_0_dbusaxi_rresp;                  // mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_rresp -> VexRiscvAxi4_0:dBusAxi_r_payload_resp
	wire         vexriscvaxi4_0_dbusaxi_awid;                   // VexRiscvAxi4_0:dBusAxi_aw_payload_id -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_awid
	wire         vexriscvaxi4_0_dbusaxi_bid;                    // mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_bid -> VexRiscvAxi4_0:dBusAxi_b_payload_id
	wire         vexriscvaxi4_0_dbusaxi_bvalid;                 // mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_bvalid -> VexRiscvAxi4_0:dBusAxi_b_valid
	wire         vexriscvaxi4_0_dbusaxi_awvalid;                // VexRiscvAxi4_0:dBusAxi_aw_valid -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_awvalid
	wire   [2:0] vexriscvaxi4_0_dbusaxi_awsize;                 // VexRiscvAxi4_0:dBusAxi_aw_payload_size -> mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_awsize
	wire         vexriscvaxi4_0_dbusaxi_rvalid;                 // mm_interconnect_0:VexRiscvAxi4_0_dBusaxi_rvalid -> VexRiscvAxi4_0:dBusAxi_r_valid
	wire   [3:0] vexriscvaxi4_0_ibusaxi_arregion;               // VexRiscvAxi4_0:iBusAxi_ar_payload_region -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_arregion
	wire   [7:0] vexriscvaxi4_0_ibusaxi_arlen;                  // VexRiscvAxi4_0:iBusAxi_ar_payload_len -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_arlen
	wire   [3:0] vexriscvaxi4_0_ibusaxi_arqos;                  // VexRiscvAxi4_0:iBusAxi_ar_payload_qos -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_arqos
	wire         vexriscvaxi4_0_ibusaxi_wready;                 // mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_wready -> VexRiscvAxi4_0:iBusaxi_wready
	wire         vexriscvaxi4_0_ibusaxi_rid;                    // mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_rid -> VexRiscvAxi4_0:iBusAxi_r_payload_id
	wire         vexriscvaxi4_0_ibusaxi_rready;                 // VexRiscvAxi4_0:iBusAxi_r_ready -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_rready
	wire   [3:0] vexriscvaxi4_0_ibusaxi_arcache;                // VexRiscvAxi4_0:iBusAxi_ar_payload_cache -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_arcache
	wire  [31:0] vexriscvaxi4_0_ibusaxi_araddr;                 // VexRiscvAxi4_0:iBusAxi_ar_payload_addr -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_araddr
	wire         vexriscvaxi4_0_ibusaxi_wvalid;                 // VexRiscvAxi4_0:iBusaxi_wvalid -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_wvalid
	wire   [2:0] vexriscvaxi4_0_ibusaxi_arprot;                 // VexRiscvAxi4_0:iBusAxi_ar_payload_prot -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_arprot
	wire         vexriscvaxi4_0_ibusaxi_arvalid;                // VexRiscvAxi4_0:iBusAxi_ar_valid -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_arvalid
	wire   [2:0] vexriscvaxi4_0_ibusaxi_awprot;                 // VexRiscvAxi4_0:iBusaxi_awprot -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_awprot
	wire  [31:0] vexriscvaxi4_0_ibusaxi_wdata;                  // VexRiscvAxi4_0:iBusaxi_wdata -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_wdata
	wire         vexriscvaxi4_0_ibusaxi_arid;                   // VexRiscvAxi4_0:iBusAxi_ar_payload_id -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_arid
	wire         vexriscvaxi4_0_ibusaxi_arlock;                 // VexRiscvAxi4_0:iBusAxi_ar_payload_lock -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_arlock
	wire         vexriscvaxi4_0_ibusaxi_awlock;                 // VexRiscvAxi4_0:iBusaxi_awlock -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_awlock
	wire  [31:0] vexriscvaxi4_0_ibusaxi_awaddr;                 // VexRiscvAxi4_0:iBusaxi_awaddr -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_awaddr
	wire         vexriscvaxi4_0_ibusaxi_arready;                // mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_arready -> VexRiscvAxi4_0:iBusAxi_ar_ready
	wire  [31:0] vexriscvaxi4_0_ibusaxi_rdata;                  // mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_rdata -> VexRiscvAxi4_0:iBusAxi_r_payload_data
	wire   [1:0] vexriscvaxi4_0_ibusaxi_arburst;                // VexRiscvAxi4_0:iBusAxi_ar_payload_burst -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_arburst
	wire         vexriscvaxi4_0_ibusaxi_awready;                // mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_awready -> VexRiscvAxi4_0:iBusaxi_awready
	wire   [2:0] vexriscvaxi4_0_ibusaxi_arsize;                 // VexRiscvAxi4_0:iBusAxi_ar_payload_size -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_arsize
	wire         vexriscvaxi4_0_ibusaxi_rlast;                  // mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_rlast -> VexRiscvAxi4_0:iBusAxi_r_payload_last
	wire         vexriscvaxi4_0_ibusaxi_bready;                 // VexRiscvAxi4_0:iBusaxi_bready -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_bready
	wire         vexriscvaxi4_0_ibusaxi_wlast;                  // VexRiscvAxi4_0:iBusaxi_wlast -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_wlast
	wire   [1:0] vexriscvaxi4_0_ibusaxi_rresp;                  // mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_rresp -> VexRiscvAxi4_0:iBusAxi_r_payload_resp
	wire         vexriscvaxi4_0_ibusaxi_bid;                    // mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_bid -> VexRiscvAxi4_0:iBusaxi_bid
	wire         vexriscvaxi4_0_ibusaxi_awid;                   // VexRiscvAxi4_0:iBusaxi_awid -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_awid
	wire         vexriscvaxi4_0_ibusaxi_bvalid;                 // mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_bvalid -> VexRiscvAxi4_0:iBusaxi_bvalid
	wire         vexriscvaxi4_0_ibusaxi_rvalid;                 // mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_rvalid -> VexRiscvAxi4_0:iBusAxi_r_valid
	wire         vexriscvaxi4_0_ibusaxi_awvalid;                // VexRiscvAxi4_0:iBusaxi_awvalid -> mm_interconnect_0:VexRiscvAxi4_0_iBusaxi_awvalid
	wire  [31:0] master_0_master_readdata;                      // mm_interconnect_0:master_0_master_readdata -> master_0:master_readdata
	wire         master_0_master_waitrequest;                   // mm_interconnect_0:master_0_master_waitrequest -> master_0:master_waitrequest
	wire  [31:0] master_0_master_address;                       // master_0:master_address -> mm_interconnect_0:master_0_master_address
	wire         master_0_master_read;                          // master_0:master_read -> mm_interconnect_0:master_0_master_read
	wire   [3:0] master_0_master_byteenable;                    // master_0:master_byteenable -> mm_interconnect_0:master_0_master_byteenable
	wire         master_0_master_readdatavalid;                 // mm_interconnect_0:master_0_master_readdatavalid -> master_0:master_readdatavalid
	wire         master_0_master_write;                         // master_0:master_write -> mm_interconnect_0:master_0_master_write
	wire  [31:0] master_0_master_writedata;                     // master_0:master_writedata -> mm_interconnect_0:master_0_master_writedata
	wire         mm_interconnect_0_onchip_memory_s1_chipselect; // mm_interconnect_0:onchip_memory_s1_chipselect -> onchip_memory:chipselect
	wire  [31:0] mm_interconnect_0_onchip_memory_s1_readdata;   // onchip_memory:readdata -> mm_interconnect_0:onchip_memory_s1_readdata
	wire   [9:0] mm_interconnect_0_onchip_memory_s1_address;    // mm_interconnect_0:onchip_memory_s1_address -> onchip_memory:address
	wire   [3:0] mm_interconnect_0_onchip_memory_s1_byteenable; // mm_interconnect_0:onchip_memory_s1_byteenable -> onchip_memory:byteenable
	wire         mm_interconnect_0_onchip_memory_s1_write;      // mm_interconnect_0:onchip_memory_s1_write -> onchip_memory:write
	wire  [31:0] mm_interconnect_0_onchip_memory_s1_writedata;  // mm_interconnect_0:onchip_memory_s1_writedata -> onchip_memory:writedata
	wire         mm_interconnect_0_onchip_memory_s1_clken;      // mm_interconnect_0:onchip_memory_s1_clken -> onchip_memory:clken
	wire         vexriscvaxi4_0_externalinterrupt_irq;          // irq_mapper:sender_irq -> VexRiscvAxi4_0:externalInterrupt
	wire         vexriscvaxi4_0_debug_resetout_reset;           // VexRiscvAxi4_0:debug_resetOut -> [irq_mapper:reset, irq_mapper_001:reset, rst_controller:reset_in0, rst_controller_001:reset_in0, rst_controller_002:reset_in0]
	wire         vexriscvaxi4_0_timerinterrupt_irq;             // irq_mapper_001:sender_irq -> VexRiscvAxi4_0:timerInterrupt
	wire         rst_controller_reset_out_reset;                // rst_controller:reset_out -> [VexRiscvAxi4_0:debugReset, VexRiscvAxi4_0:reset, mm_interconnect_0:VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset]
	wire         master_0_master_reset_reset;                   // master_0:master_reset_reset -> [rst_controller:reset_in1, rst_controller_001:reset_in1]
	wire         reset_in_out_reset_reset;                      // reset_in:out_reset_n -> [rst_controller:reset_in2, rst_controller_001:reset_in2, rst_controller_002:reset_in1]
	wire         rst_controller_001_reset_out_reset;            // rst_controller_001:reset_out -> master_0:clk_reset_reset
	wire         rst_controller_002_reset_out_reset;            // rst_controller_002:reset_out -> [mm_interconnect_0:onchip_memory_reset1_reset_bridge_in_reset_reset, onchip_memory:reset]

	bram_VexRiscvAxi4_0 vexriscvaxi4_0 (
		.clk                       (clock_in_out_clk_clk),                 //   input,   width = 1,             clock.clk
		.reset                     (rst_controller_reset_out_reset),       //   input,   width = 1,             reset.reset
		.dBusAxi_aw_valid          (vexriscvaxi4_0_dbusaxi_awvalid),       //  output,   width = 1,           dBusaxi.awvalid
		.dBusAxi_aw_ready          (vexriscvaxi4_0_dbusaxi_awready),       //   input,   width = 1,                  .awready
		.dBusAxi_aw_payload_addr   (vexriscvaxi4_0_dbusaxi_awaddr),        //  output,  width = 32,                  .awaddr
		.dBusAxi_aw_payload_id     (vexriscvaxi4_0_dbusaxi_awid),          //  output,   width = 1,                  .awid
		.dBusAxi_aw_payload_region (vexriscvaxi4_0_dbusaxi_awregion),      //  output,   width = 4,                  .awregion
		.dBusAxi_aw_payload_len    (vexriscvaxi4_0_dbusaxi_awlen),         //  output,   width = 8,                  .awlen
		.dBusAxi_aw_payload_size   (vexriscvaxi4_0_dbusaxi_awsize),        //  output,   width = 3,                  .awsize
		.dBusAxi_aw_payload_burst  (vexriscvaxi4_0_dbusaxi_awburst),       //  output,   width = 2,                  .awburst
		.dBusAxi_aw_payload_lock   (vexriscvaxi4_0_dbusaxi_awlock),        //  output,   width = 1,                  .awlock
		.dBusAxi_aw_payload_cache  (vexriscvaxi4_0_dbusaxi_awcache),       //  output,   width = 4,                  .awcache
		.dBusAxi_aw_payload_qos    (vexriscvaxi4_0_dbusaxi_awqos),         //  output,   width = 4,                  .awqos
		.dBusAxi_aw_payload_prot   (vexriscvaxi4_0_dbusaxi_awprot),        //  output,   width = 3,                  .awprot
		.dBusAxi_w_valid           (vexriscvaxi4_0_dbusaxi_wvalid),        //  output,   width = 1,                  .wvalid
		.dBusAxi_w_ready           (vexriscvaxi4_0_dbusaxi_wready),        //   input,   width = 1,                  .wready
		.dBusAxi_w_payload_data    (vexriscvaxi4_0_dbusaxi_wdata),         //  output,  width = 32,                  .wdata
		.dBusAxi_w_payload_strb    (vexriscvaxi4_0_dbusaxi_wstrb),         //  output,   width = 4,                  .wstrb
		.dBusAxi_w_payload_last    (vexriscvaxi4_0_dbusaxi_wlast),         //  output,   width = 1,                  .wlast
		.dBusAxi_b_valid           (vexriscvaxi4_0_dbusaxi_bvalid),        //   input,   width = 1,                  .bvalid
		.dBusAxi_b_ready           (vexriscvaxi4_0_dbusaxi_bready),        //  output,   width = 1,                  .bready
		.dBusAxi_b_payload_id      (vexriscvaxi4_0_dbusaxi_bid),           //   input,   width = 1,                  .bid
		.dBusAxi_b_payload_resp    (vexriscvaxi4_0_dbusaxi_bresp),         //   input,   width = 2,                  .bresp
		.dBusAxi_ar_valid          (vexriscvaxi4_0_dbusaxi_arvalid),       //  output,   width = 1,                  .arvalid
		.dBusAxi_ar_ready          (vexriscvaxi4_0_dbusaxi_arready),       //   input,   width = 1,                  .arready
		.dBusAxi_ar_payload_addr   (vexriscvaxi4_0_dbusaxi_araddr),        //  output,  width = 32,                  .araddr
		.dBusAxi_ar_payload_id     (vexriscvaxi4_0_dbusaxi_arid),          //  output,   width = 1,                  .arid
		.dBusAxi_ar_payload_region (vexriscvaxi4_0_dbusaxi_arregion),      //  output,   width = 4,                  .arregion
		.dBusAxi_ar_payload_len    (vexriscvaxi4_0_dbusaxi_arlen),         //  output,   width = 8,                  .arlen
		.dBusAxi_ar_payload_size   (vexriscvaxi4_0_dbusaxi_arsize),        //  output,   width = 3,                  .arsize
		.dBusAxi_ar_payload_burst  (vexriscvaxi4_0_dbusaxi_arburst),       //  output,   width = 2,                  .arburst
		.dBusAxi_ar_payload_lock   (vexriscvaxi4_0_dbusaxi_arlock),        //  output,   width = 1,                  .arlock
		.dBusAxi_ar_payload_cache  (vexriscvaxi4_0_dbusaxi_arcache),       //  output,   width = 4,                  .arcache
		.dBusAxi_ar_payload_qos    (vexriscvaxi4_0_dbusaxi_arqos),         //  output,   width = 4,                  .arqos
		.dBusAxi_ar_payload_prot   (vexriscvaxi4_0_dbusaxi_arprot),        //  output,   width = 3,                  .arprot
		.dBusAxi_r_valid           (vexriscvaxi4_0_dbusaxi_rvalid),        //   input,   width = 1,                  .rvalid
		.dBusAxi_r_ready           (vexriscvaxi4_0_dbusaxi_rready),        //  output,   width = 1,                  .rready
		.dBusAxi_r_payload_data    (vexriscvaxi4_0_dbusaxi_rdata),         //   input,  width = 32,                  .rdata
		.dBusAxi_r_payload_id      (vexriscvaxi4_0_dbusaxi_rid),           //   input,   width = 1,                  .rid
		.dBusAxi_r_payload_resp    (vexriscvaxi4_0_dbusaxi_rresp),         //   input,   width = 2,                  .rresp
		.dBusAxi_r_payload_last    (vexriscvaxi4_0_dbusaxi_rlast),         //   input,   width = 1,                  .rlast
		.iBusAxi_ar_valid          (vexriscvaxi4_0_ibusaxi_arvalid),       //  output,   width = 1,           iBusaxi.arvalid
		.iBusAxi_ar_ready          (vexriscvaxi4_0_ibusaxi_arready),       //   input,   width = 1,                  .arready
		.iBusAxi_ar_payload_addr   (vexriscvaxi4_0_ibusaxi_araddr),        //  output,  width = 32,                  .araddr
		.iBusAxi_ar_payload_id     (vexriscvaxi4_0_ibusaxi_arid),          //  output,   width = 1,                  .arid
		.iBusAxi_ar_payload_region (vexriscvaxi4_0_ibusaxi_arregion),      //  output,   width = 4,                  .arregion
		.iBusAxi_ar_payload_len    (vexriscvaxi4_0_ibusaxi_arlen),         //  output,   width = 8,                  .arlen
		.iBusAxi_ar_payload_size   (vexriscvaxi4_0_ibusaxi_arsize),        //  output,   width = 3,                  .arsize
		.iBusAxi_ar_payload_burst  (vexriscvaxi4_0_ibusaxi_arburst),       //  output,   width = 2,                  .arburst
		.iBusAxi_ar_payload_lock   (vexriscvaxi4_0_ibusaxi_arlock),        //  output,   width = 1,                  .arlock
		.iBusAxi_ar_payload_cache  (vexriscvaxi4_0_ibusaxi_arcache),       //  output,   width = 4,                  .arcache
		.iBusAxi_ar_payload_qos    (vexriscvaxi4_0_ibusaxi_arqos),         //  output,   width = 4,                  .arqos
		.iBusAxi_ar_payload_prot   (vexriscvaxi4_0_ibusaxi_arprot),        //  output,   width = 3,                  .arprot
		.iBusAxi_r_valid           (vexriscvaxi4_0_ibusaxi_rvalid),        //   input,   width = 1,                  .rvalid
		.iBusAxi_r_ready           (vexriscvaxi4_0_ibusaxi_rready),        //  output,   width = 1,                  .rready
		.iBusAxi_r_payload_data    (vexriscvaxi4_0_ibusaxi_rdata),         //   input,  width = 32,                  .rdata
		.iBusAxi_r_payload_id      (vexriscvaxi4_0_ibusaxi_rid),           //   input,   width = 1,                  .rid
		.iBusAxi_r_payload_resp    (vexriscvaxi4_0_ibusaxi_rresp),         //   input,   width = 2,                  .rresp
		.iBusAxi_r_payload_last    (vexriscvaxi4_0_ibusaxi_rlast),         //   input,   width = 1,                  .rlast
		.iBusaxi_awaddr            (vexriscvaxi4_0_ibusaxi_awaddr),        //  output,  width = 32,                  .awaddr
		.iBusaxi_awprot            (vexriscvaxi4_0_ibusaxi_awprot),        //  output,   width = 3,                  .awprot
		.iBusaxi_awlock            (vexriscvaxi4_0_ibusaxi_awlock),        //  output,   width = 1,                  .awlock
		.iBusaxi_awvalid           (vexriscvaxi4_0_ibusaxi_awvalid),       //  output,   width = 1,                  .awvalid
		.iBusaxi_awready           (vexriscvaxi4_0_ibusaxi_awready),       //   input,   width = 1,                  .awready
		.iBusaxi_wdata             (vexriscvaxi4_0_ibusaxi_wdata),         //  output,  width = 32,                  .wdata
		.iBusaxi_wlast             (vexriscvaxi4_0_ibusaxi_wlast),         //  output,   width = 1,                  .wlast
		.iBusaxi_wready            (vexriscvaxi4_0_ibusaxi_wready),        //   input,   width = 1,                  .wready
		.iBusaxi_wvalid            (vexriscvaxi4_0_ibusaxi_wvalid),        //  output,   width = 1,                  .wvalid
		.iBusaxi_bvalid            (vexriscvaxi4_0_ibusaxi_bvalid),        //   input,   width = 1,                  .bvalid
		.iBusaxi_bready            (vexriscvaxi4_0_ibusaxi_bready),        //  output,   width = 1,                  .bready
		.iBusaxi_bid               (vexriscvaxi4_0_ibusaxi_bid),           //   input,   width = 1,                  .bid
		.iBusaxi_awid              (vexriscvaxi4_0_ibusaxi_awid),          //  output,   width = 1,                  .awid
		.debugReset                (rst_controller_reset_out_reset),       //   input,   width = 1,        debugReset.reset
		.debug_resetOut            (vexriscvaxi4_0_debug_resetout_reset),  //  output,   width = 1,    debug_resetOut.reset
		.externalInterrupt         (vexriscvaxi4_0_externalinterrupt_irq), //   input,   width = 1, externalInterrupt.irq
		.timerInterrupt            (vexriscvaxi4_0_timerinterrupt_irq),    //   input,   width = 1,    timerInterrupt.irq
		.softwareInterrupt         (),                                     //   input,   width = 1, softwareInterrupt.export
		.jtag_tms                  (),                                     //   input,   width = 1,              jtag.export
		.jtag_tdi                  (),                                     //   input,   width = 1,                  .export1
		.jtag_tdo                  (),                                     //  output,   width = 1,                  .export2
		.jtag_tck                  ()                                      //   input,   width = 1,                  .export3
	);

	bram_clock_in clock_in (
		.in_clk  (clk_clk),              //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	bram_master_0 master_0 (
		.clk_clk              (clock_in_out_clk_clk),               //   input,   width = 1,          clk.clk
		.clk_reset_reset      (rst_controller_001_reset_out_reset), //   input,   width = 1,    clk_reset.reset
		.master_reset_reset   (master_0_master_reset_reset),        //  output,   width = 1, master_reset.reset
		.master_address       (master_0_master_address),            //  output,  width = 32,       master.address
		.master_readdata      (master_0_master_readdata),           //   input,  width = 32,             .readdata
		.master_read          (master_0_master_read),               //  output,   width = 1,             .read
		.master_write         (master_0_master_write),              //  output,   width = 1,             .write
		.master_writedata     (master_0_master_writedata),          //  output,  width = 32,             .writedata
		.master_waitrequest   (master_0_master_waitrequest),        //   input,   width = 1,             .waitrequest
		.master_readdatavalid (master_0_master_readdatavalid),      //   input,   width = 1,             .readdatavalid
		.master_byteenable    (master_0_master_byteenable)          //  output,   width = 4,             .byteenable
	);

	bram_onchip_memory2_0 onchip_memory (
		.address     (mm_interconnect_0_onchip_memory_s1_address),    //   input,  width = 10,     s1.address
		.clken       (mm_interconnect_0_onchip_memory_s1_clken),      //   input,   width = 1,       .clken
		.chipselect  (mm_interconnect_0_onchip_memory_s1_chipselect), //   input,   width = 1,       .chipselect
		.write       (mm_interconnect_0_onchip_memory_s1_write),      //   input,   width = 1,       .write
		.readdata    (mm_interconnect_0_onchip_memory_s1_readdata),   //  output,  width = 32,       .readdata
		.writedata   (mm_interconnect_0_onchip_memory_s1_writedata),  //   input,  width = 32,       .writedata
		.byteenable  (mm_interconnect_0_onchip_memory_s1_byteenable), //   input,   width = 4,       .byteenable
		.address2    (onchip_memory_address),                         //   input,  width = 10,     s2.address
		.chipselect2 (onchip_memory_chipselect),                      //   input,   width = 1,       .chipselect
		.clken2      (onchip_memory_clken),                           //   input,   width = 1,       .clken
		.write2      (onchip_memory_write),                           //   input,   width = 1,       .write
		.readdata2   (onchip_memory_readdata),                        //  output,  width = 32,       .readdata
		.writedata2  (onchip_memory_writedata),                       //   input,  width = 32,       .writedata
		.byteenable2 (onchip_memory_byteenable),                      //   input,   width = 4,       .byteenable
		.clk         (clock_in_out_clk_clk),                          //   input,   width = 1,   clk1.clk
		.reset       (rst_controller_002_reset_out_reset)             //   input,   width = 1, reset1.reset
	);

	bram_reset_in reset_in (
		.clk         (clock_in_out_clk_clk),     //   input,  width = 1,       clk.clk
		.in_reset_n  (reset_reset_n),            //   input,  width = 1,  in_reset.reset_n
		.out_reset_n (reset_in_out_reset_reset)  //  output,  width = 1, out_reset.reset_n
	);

	bram_altera_mm_interconnect_191_gm3s52a mm_interconnect_0 (
		.VexRiscvAxi4_0_dBusaxi_awid                      (vexriscvaxi4_0_dbusaxi_awid),                   //   input,   width = 1,                     VexRiscvAxi4_0_dBusaxi.awid
		.VexRiscvAxi4_0_dBusaxi_awaddr                    (vexriscvaxi4_0_dbusaxi_awaddr),                 //   input,  width = 32,                                           .awaddr
		.VexRiscvAxi4_0_dBusaxi_awlen                     (vexriscvaxi4_0_dbusaxi_awlen),                  //   input,   width = 8,                                           .awlen
		.VexRiscvAxi4_0_dBusaxi_awsize                    (vexriscvaxi4_0_dbusaxi_awsize),                 //   input,   width = 3,                                           .awsize
		.VexRiscvAxi4_0_dBusaxi_awburst                   (vexriscvaxi4_0_dbusaxi_awburst),                //   input,   width = 2,                                           .awburst
		.VexRiscvAxi4_0_dBusaxi_awlock                    (vexriscvaxi4_0_dbusaxi_awlock),                 //   input,   width = 1,                                           .awlock
		.VexRiscvAxi4_0_dBusaxi_awcache                   (vexriscvaxi4_0_dbusaxi_awcache),                //   input,   width = 4,                                           .awcache
		.VexRiscvAxi4_0_dBusaxi_awprot                    (vexriscvaxi4_0_dbusaxi_awprot),                 //   input,   width = 3,                                           .awprot
		.VexRiscvAxi4_0_dBusaxi_awqos                     (vexriscvaxi4_0_dbusaxi_awqos),                  //   input,   width = 4,                                           .awqos
		.VexRiscvAxi4_0_dBusaxi_awregion                  (vexriscvaxi4_0_dbusaxi_awregion),               //   input,   width = 4,                                           .awregion
		.VexRiscvAxi4_0_dBusaxi_awvalid                   (vexriscvaxi4_0_dbusaxi_awvalid),                //   input,   width = 1,                                           .awvalid
		.VexRiscvAxi4_0_dBusaxi_awready                   (vexriscvaxi4_0_dbusaxi_awready),                //  output,   width = 1,                                           .awready
		.VexRiscvAxi4_0_dBusaxi_wdata                     (vexriscvaxi4_0_dbusaxi_wdata),                  //   input,  width = 32,                                           .wdata
		.VexRiscvAxi4_0_dBusaxi_wstrb                     (vexriscvaxi4_0_dbusaxi_wstrb),                  //   input,   width = 4,                                           .wstrb
		.VexRiscvAxi4_0_dBusaxi_wlast                     (vexriscvaxi4_0_dbusaxi_wlast),                  //   input,   width = 1,                                           .wlast
		.VexRiscvAxi4_0_dBusaxi_wvalid                    (vexriscvaxi4_0_dbusaxi_wvalid),                 //   input,   width = 1,                                           .wvalid
		.VexRiscvAxi4_0_dBusaxi_wready                    (vexriscvaxi4_0_dbusaxi_wready),                 //  output,   width = 1,                                           .wready
		.VexRiscvAxi4_0_dBusaxi_bid                       (vexriscvaxi4_0_dbusaxi_bid),                    //  output,   width = 1,                                           .bid
		.VexRiscvAxi4_0_dBusaxi_bresp                     (vexriscvaxi4_0_dbusaxi_bresp),                  //  output,   width = 2,                                           .bresp
		.VexRiscvAxi4_0_dBusaxi_bvalid                    (vexriscvaxi4_0_dbusaxi_bvalid),                 //  output,   width = 1,                                           .bvalid
		.VexRiscvAxi4_0_dBusaxi_bready                    (vexriscvaxi4_0_dbusaxi_bready),                 //   input,   width = 1,                                           .bready
		.VexRiscvAxi4_0_dBusaxi_arid                      (vexriscvaxi4_0_dbusaxi_arid),                   //   input,   width = 1,                                           .arid
		.VexRiscvAxi4_0_dBusaxi_araddr                    (vexriscvaxi4_0_dbusaxi_araddr),                 //   input,  width = 32,                                           .araddr
		.VexRiscvAxi4_0_dBusaxi_arlen                     (vexriscvaxi4_0_dbusaxi_arlen),                  //   input,   width = 8,                                           .arlen
		.VexRiscvAxi4_0_dBusaxi_arsize                    (vexriscvaxi4_0_dbusaxi_arsize),                 //   input,   width = 3,                                           .arsize
		.VexRiscvAxi4_0_dBusaxi_arburst                   (vexriscvaxi4_0_dbusaxi_arburst),                //   input,   width = 2,                                           .arburst
		.VexRiscvAxi4_0_dBusaxi_arlock                    (vexriscvaxi4_0_dbusaxi_arlock),                 //   input,   width = 1,                                           .arlock
		.VexRiscvAxi4_0_dBusaxi_arcache                   (vexriscvaxi4_0_dbusaxi_arcache),                //   input,   width = 4,                                           .arcache
		.VexRiscvAxi4_0_dBusaxi_arprot                    (vexriscvaxi4_0_dbusaxi_arprot),                 //   input,   width = 3,                                           .arprot
		.VexRiscvAxi4_0_dBusaxi_arqos                     (vexriscvaxi4_0_dbusaxi_arqos),                  //   input,   width = 4,                                           .arqos
		.VexRiscvAxi4_0_dBusaxi_arregion                  (vexriscvaxi4_0_dbusaxi_arregion),               //   input,   width = 4,                                           .arregion
		.VexRiscvAxi4_0_dBusaxi_arvalid                   (vexriscvaxi4_0_dbusaxi_arvalid),                //   input,   width = 1,                                           .arvalid
		.VexRiscvAxi4_0_dBusaxi_arready                   (vexriscvaxi4_0_dbusaxi_arready),                //  output,   width = 1,                                           .arready
		.VexRiscvAxi4_0_dBusaxi_rid                       (vexriscvaxi4_0_dbusaxi_rid),                    //  output,   width = 1,                                           .rid
		.VexRiscvAxi4_0_dBusaxi_rdata                     (vexriscvaxi4_0_dbusaxi_rdata),                  //  output,  width = 32,                                           .rdata
		.VexRiscvAxi4_0_dBusaxi_rresp                     (vexriscvaxi4_0_dbusaxi_rresp),                  //  output,   width = 2,                                           .rresp
		.VexRiscvAxi4_0_dBusaxi_rlast                     (vexriscvaxi4_0_dbusaxi_rlast),                  //  output,   width = 1,                                           .rlast
		.VexRiscvAxi4_0_dBusaxi_rvalid                    (vexriscvaxi4_0_dbusaxi_rvalid),                 //  output,   width = 1,                                           .rvalid
		.VexRiscvAxi4_0_dBusaxi_rready                    (vexriscvaxi4_0_dbusaxi_rready),                 //   input,   width = 1,                                           .rready
		.VexRiscvAxi4_0_iBusaxi_awid                      (vexriscvaxi4_0_ibusaxi_awid),                   //   input,   width = 1,                     VexRiscvAxi4_0_iBusaxi.awid
		.VexRiscvAxi4_0_iBusaxi_awaddr                    (vexriscvaxi4_0_ibusaxi_awaddr),                 //   input,  width = 32,                                           .awaddr
		.VexRiscvAxi4_0_iBusaxi_awlock                    (vexriscvaxi4_0_ibusaxi_awlock),                 //   input,   width = 1,                                           .awlock
		.VexRiscvAxi4_0_iBusaxi_awprot                    (vexriscvaxi4_0_ibusaxi_awprot),                 //   input,   width = 3,                                           .awprot
		.VexRiscvAxi4_0_iBusaxi_awvalid                   (vexriscvaxi4_0_ibusaxi_awvalid),                //   input,   width = 1,                                           .awvalid
		.VexRiscvAxi4_0_iBusaxi_awready                   (vexriscvaxi4_0_ibusaxi_awready),                //  output,   width = 1,                                           .awready
		.VexRiscvAxi4_0_iBusaxi_wdata                     (vexriscvaxi4_0_ibusaxi_wdata),                  //   input,  width = 32,                                           .wdata
		.VexRiscvAxi4_0_iBusaxi_wlast                     (vexriscvaxi4_0_ibusaxi_wlast),                  //   input,   width = 1,                                           .wlast
		.VexRiscvAxi4_0_iBusaxi_wvalid                    (vexriscvaxi4_0_ibusaxi_wvalid),                 //   input,   width = 1,                                           .wvalid
		.VexRiscvAxi4_0_iBusaxi_wready                    (vexriscvaxi4_0_ibusaxi_wready),                 //  output,   width = 1,                                           .wready
		.VexRiscvAxi4_0_iBusaxi_bid                       (vexriscvaxi4_0_ibusaxi_bid),                    //  output,   width = 1,                                           .bid
		.VexRiscvAxi4_0_iBusaxi_bvalid                    (vexriscvaxi4_0_ibusaxi_bvalid),                 //  output,   width = 1,                                           .bvalid
		.VexRiscvAxi4_0_iBusaxi_bready                    (vexriscvaxi4_0_ibusaxi_bready),                 //   input,   width = 1,                                           .bready
		.VexRiscvAxi4_0_iBusaxi_arid                      (vexriscvaxi4_0_ibusaxi_arid),                   //   input,   width = 1,                                           .arid
		.VexRiscvAxi4_0_iBusaxi_araddr                    (vexriscvaxi4_0_ibusaxi_araddr),                 //   input,  width = 32,                                           .araddr
		.VexRiscvAxi4_0_iBusaxi_arlen                     (vexriscvaxi4_0_ibusaxi_arlen),                  //   input,   width = 8,                                           .arlen
		.VexRiscvAxi4_0_iBusaxi_arsize                    (vexriscvaxi4_0_ibusaxi_arsize),                 //   input,   width = 3,                                           .arsize
		.VexRiscvAxi4_0_iBusaxi_arburst                   (vexriscvaxi4_0_ibusaxi_arburst),                //   input,   width = 2,                                           .arburst
		.VexRiscvAxi4_0_iBusaxi_arlock                    (vexriscvaxi4_0_ibusaxi_arlock),                 //   input,   width = 1,                                           .arlock
		.VexRiscvAxi4_0_iBusaxi_arcache                   (vexriscvaxi4_0_ibusaxi_arcache),                //   input,   width = 4,                                           .arcache
		.VexRiscvAxi4_0_iBusaxi_arprot                    (vexriscvaxi4_0_ibusaxi_arprot),                 //   input,   width = 3,                                           .arprot
		.VexRiscvAxi4_0_iBusaxi_arqos                     (vexriscvaxi4_0_ibusaxi_arqos),                  //   input,   width = 4,                                           .arqos
		.VexRiscvAxi4_0_iBusaxi_arregion                  (vexriscvaxi4_0_ibusaxi_arregion),               //   input,   width = 4,                                           .arregion
		.VexRiscvAxi4_0_iBusaxi_arvalid                   (vexriscvaxi4_0_ibusaxi_arvalid),                //   input,   width = 1,                                           .arvalid
		.VexRiscvAxi4_0_iBusaxi_arready                   (vexriscvaxi4_0_ibusaxi_arready),                //  output,   width = 1,                                           .arready
		.VexRiscvAxi4_0_iBusaxi_rid                       (vexriscvaxi4_0_ibusaxi_rid),                    //  output,   width = 1,                                           .rid
		.VexRiscvAxi4_0_iBusaxi_rdata                     (vexriscvaxi4_0_ibusaxi_rdata),                  //  output,  width = 32,                                           .rdata
		.VexRiscvAxi4_0_iBusaxi_rresp                     (vexriscvaxi4_0_ibusaxi_rresp),                  //  output,   width = 2,                                           .rresp
		.VexRiscvAxi4_0_iBusaxi_rlast                     (vexriscvaxi4_0_ibusaxi_rlast),                  //  output,   width = 1,                                           .rlast
		.VexRiscvAxi4_0_iBusaxi_rvalid                    (vexriscvaxi4_0_ibusaxi_rvalid),                 //  output,   width = 1,                                           .rvalid
		.VexRiscvAxi4_0_iBusaxi_rready                    (vexriscvaxi4_0_ibusaxi_rready),                 //   input,   width = 1,                                           .rready
		.master_0_master_address                          (master_0_master_address),                       //   input,  width = 32,                            master_0_master.address
		.master_0_master_waitrequest                      (master_0_master_waitrequest),                   //  output,   width = 1,                                           .waitrequest
		.master_0_master_byteenable                       (master_0_master_byteenable),                    //   input,   width = 4,                                           .byteenable
		.master_0_master_read                             (master_0_master_read),                          //   input,   width = 1,                                           .read
		.master_0_master_readdata                         (master_0_master_readdata),                      //  output,  width = 32,                                           .readdata
		.master_0_master_readdatavalid                    (master_0_master_readdatavalid),                 //  output,   width = 1,                                           .readdatavalid
		.master_0_master_write                            (master_0_master_write),                         //   input,   width = 1,                                           .write
		.master_0_master_writedata                        (master_0_master_writedata),                     //   input,  width = 32,                                           .writedata
		.onchip_memory_s1_address                         (mm_interconnect_0_onchip_memory_s1_address),    //  output,  width = 10,                           onchip_memory_s1.address
		.onchip_memory_s1_write                           (mm_interconnect_0_onchip_memory_s1_write),      //  output,   width = 1,                                           .write
		.onchip_memory_s1_readdata                        (mm_interconnect_0_onchip_memory_s1_readdata),   //   input,  width = 32,                                           .readdata
		.onchip_memory_s1_writedata                       (mm_interconnect_0_onchip_memory_s1_writedata),  //  output,  width = 32,                                           .writedata
		.onchip_memory_s1_byteenable                      (mm_interconnect_0_onchip_memory_s1_byteenable), //  output,   width = 4,                                           .byteenable
		.onchip_memory_s1_chipselect                      (mm_interconnect_0_onchip_memory_s1_chipselect), //  output,   width = 1,                                           .chipselect
		.onchip_memory_s1_clken                           (mm_interconnect_0_onchip_memory_s1_clken),      //  output,   width = 1,                                           .clken
		.VexRiscvAxi4_0_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                //   input,   width = 1, VexRiscvAxi4_0_reset_reset_bridge_in_reset.reset
		.onchip_memory_reset1_reset_bridge_in_reset_reset (rst_controller_002_reset_out_reset),            //   input,   width = 1, onchip_memory_reset1_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                             (clock_in_out_clk_clk)                           //   input,   width = 1,                           clock_in_out_clk.clk
	);

	bram_altera_irq_mapper_191_u6o76qa irq_mapper (
		.clk        (clock_in_out_clk_clk),                 //   input,  width = 1,       clk.clk
		.reset      (vexriscvaxi4_0_debug_resetout_reset),  //   input,  width = 1, clk_reset.reset
		.sender_irq (vexriscvaxi4_0_externalinterrupt_irq)  //  output,  width = 1,    sender.irq
	);

	bram_altera_irq_mapper_191_u6o76qa irq_mapper_001 (
		.clk        (clock_in_out_clk_clk),                //   input,  width = 1,       clk.clk
		.reset      (vexriscvaxi4_0_debug_resetout_reset), //   input,  width = 1, clk_reset.reset
		.sender_irq (vexriscvaxi4_0_timerinterrupt_irq)    //  output,  width = 1,    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (3),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (vexriscvaxi4_0_debug_resetout_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (master_0_master_reset_reset),         //   input,  width = 1, reset_in1.reset
		.reset_in2      (~reset_in_out_reset_reset),           //   input,  width = 1, reset_in2.reset
		.clk            (clock_in_out_clk_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset),      //  output,  width = 1, reset_out.reset
		.reset_req      (),                                    // (terminated),                       
		.reset_req_in0  (1'b0),                                // (terminated),                       
		.reset_req_in1  (1'b0),                                // (terminated),                       
		.reset_req_in2  (1'b0),                                // (terminated),                       
		.reset_in3      (1'b0),                                // (terminated),                       
		.reset_req_in3  (1'b0),                                // (terminated),                       
		.reset_in4      (1'b0),                                // (terminated),                       
		.reset_req_in4  (1'b0),                                // (terminated),                       
		.reset_in5      (1'b0),                                // (terminated),                       
		.reset_req_in5  (1'b0),                                // (terminated),                       
		.reset_in6      (1'b0),                                // (terminated),                       
		.reset_req_in6  (1'b0),                                // (terminated),                       
		.reset_in7      (1'b0),                                // (terminated),                       
		.reset_req_in7  (1'b0),                                // (terminated),                       
		.reset_in8      (1'b0),                                // (terminated),                       
		.reset_req_in8  (1'b0),                                // (terminated),                       
		.reset_in9      (1'b0),                                // (terminated),                       
		.reset_req_in9  (1'b0),                                // (terminated),                       
		.reset_in10     (1'b0),                                // (terminated),                       
		.reset_req_in10 (1'b0),                                // (terminated),                       
		.reset_in11     (1'b0),                                // (terminated),                       
		.reset_req_in11 (1'b0),                                // (terminated),                       
		.reset_in12     (1'b0),                                // (terminated),                       
		.reset_req_in12 (1'b0),                                // (terminated),                       
		.reset_in13     (1'b0),                                // (terminated),                       
		.reset_req_in13 (1'b0),                                // (terminated),                       
		.reset_in14     (1'b0),                                // (terminated),                       
		.reset_req_in14 (1'b0),                                // (terminated),                       
		.reset_in15     (1'b0),                                // (terminated),                       
		.reset_req_in15 (1'b0)                                 // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (3),
		.OUTPUT_RESET_SYNC_EDGES   ("none"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (vexriscvaxi4_0_debug_resetout_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (master_0_master_reset_reset),         //   input,  width = 1, reset_in1.reset
		.reset_in2      (~reset_in_out_reset_reset),           //   input,  width = 1, reset_in2.reset
		.clk            (),                                    //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset),  //  output,  width = 1, reset_out.reset
		.reset_req      (),                                    // (terminated),                       
		.reset_req_in0  (1'b0),                                // (terminated),                       
		.reset_req_in1  (1'b0),                                // (terminated),                       
		.reset_req_in2  (1'b0),                                // (terminated),                       
		.reset_in3      (1'b0),                                // (terminated),                       
		.reset_req_in3  (1'b0),                                // (terminated),                       
		.reset_in4      (1'b0),                                // (terminated),                       
		.reset_req_in4  (1'b0),                                // (terminated),                       
		.reset_in5      (1'b0),                                // (terminated),                       
		.reset_req_in5  (1'b0),                                // (terminated),                       
		.reset_in6      (1'b0),                                // (terminated),                       
		.reset_req_in6  (1'b0),                                // (terminated),                       
		.reset_in7      (1'b0),                                // (terminated),                       
		.reset_req_in7  (1'b0),                                // (terminated),                       
		.reset_in8      (1'b0),                                // (terminated),                       
		.reset_req_in8  (1'b0),                                // (terminated),                       
		.reset_in9      (1'b0),                                // (terminated),                       
		.reset_req_in9  (1'b0),                                // (terminated),                       
		.reset_in10     (1'b0),                                // (terminated),                       
		.reset_req_in10 (1'b0),                                // (terminated),                       
		.reset_in11     (1'b0),                                // (terminated),                       
		.reset_req_in11 (1'b0),                                // (terminated),                       
		.reset_in12     (1'b0),                                // (terminated),                       
		.reset_req_in12 (1'b0),                                // (terminated),                       
		.reset_in13     (1'b0),                                // (terminated),                       
		.reset_req_in13 (1'b0),                                // (terminated),                       
		.reset_in14     (1'b0),                                // (terminated),                       
		.reset_req_in14 (1'b0),                                // (terminated),                       
		.reset_in15     (1'b0),                                // (terminated),                       
		.reset_req_in15 (1'b0)                                 // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (vexriscvaxi4_0_debug_resetout_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~reset_in_out_reset_reset),           //   input,  width = 1, reset_in1.reset
		.clk            (clock_in_out_clk_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset),  //  output,  width = 1, reset_out.reset
		.reset_req      (),                                    // (terminated),                       
		.reset_req_in0  (1'b0),                                // (terminated),                       
		.reset_req_in1  (1'b0),                                // (terminated),                       
		.reset_in2      (1'b0),                                // (terminated),                       
		.reset_req_in2  (1'b0),                                // (terminated),                       
		.reset_in3      (1'b0),                                // (terminated),                       
		.reset_req_in3  (1'b0),                                // (terminated),                       
		.reset_in4      (1'b0),                                // (terminated),                       
		.reset_req_in4  (1'b0),                                // (terminated),                       
		.reset_in5      (1'b0),                                // (terminated),                       
		.reset_req_in5  (1'b0),                                // (terminated),                       
		.reset_in6      (1'b0),                                // (terminated),                       
		.reset_req_in6  (1'b0),                                // (terminated),                       
		.reset_in7      (1'b0),                                // (terminated),                       
		.reset_req_in7  (1'b0),                                // (terminated),                       
		.reset_in8      (1'b0),                                // (terminated),                       
		.reset_req_in8  (1'b0),                                // (terminated),                       
		.reset_in9      (1'b0),                                // (terminated),                       
		.reset_req_in9  (1'b0),                                // (terminated),                       
		.reset_in10     (1'b0),                                // (terminated),                       
		.reset_req_in10 (1'b0),                                // (terminated),                       
		.reset_in11     (1'b0),                                // (terminated),                       
		.reset_req_in11 (1'b0),                                // (terminated),                       
		.reset_in12     (1'b0),                                // (terminated),                       
		.reset_req_in12 (1'b0),                                // (terminated),                       
		.reset_in13     (1'b0),                                // (terminated),                       
		.reset_req_in13 (1'b0),                                // (terminated),                       
		.reset_in14     (1'b0),                                // (terminated),                       
		.reset_req_in14 (1'b0),                                // (terminated),                       
		.reset_in15     (1'b0),                                // (terminated),                       
		.reset_req_in15 (1'b0)                                 // (terminated),                       
	);

endmodule
